/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/content-metadata/{content_identifier}/": {
    /**
     * @description GET entry point for the `ContentMetadataViewSet`
     *
     * Fetches subsidy related content metadata.
     *
     * Returns:
     *     Subsidy content metadata payload:
     *         content_uuid (uuid4): UUID identifier conencted to the content
     *         content_key (str): String content key identifier connected to the content
     *         source (str): Product source string, as of 3/16/23 this is either `2u` or `edX`.
     *         content_price (float): Float representation of the course price in USD cents,
     *           read from either the ``first_enrollable_paid_seat_price`` or from ``entitlements``
     *           for the content.
     *
     *     404 Content Not Found IFF
     *         - The content identifier does not exist OR the content is not connected to the enterprise customer
     *             via an enterprise catalog query
     *         - The content metadata payload does not contain an appropriate entitlement mode and price or the
     *             content's associated product source
     */
    get: operations["api_v1_content_metadata_retrieve"];
  };
  "/api/v1/subsidies/": {
    /**
     * @description ViewSet for the Subsidy model.
     *
     * Currently, this only supports listing, reading, and testing subsidies::
     *
     *   GET /api/v1/subsidies/?enterprise_customer_uuid={uuid}&subsidy_type={"learner_credit","subscription"}
     *   GET /api/v1/subsidies/{subsidy_uuid}/
     *   GET /api/v1/subsidies/{subsidy_uuid}/can_redeem/
     */
    get: operations["api_v1_subsidies_list"];
    /**
     * @description Get or create a new subsidy.  See request payload serialization notes
     * around ``default_internal_only`` and the get-or-create operation.
     *
     * Endpoint Location: POST /api/v1/subsidies/
     */
    post: operations["api_v1_subsidies_create"];
  };
  "/api/v1/subsidies/{uuid}/": {
    /**
     * @description ViewSet for the Subsidy model.
     *
     * Currently, this only supports listing, reading, and testing subsidies::
     *
     *   GET /api/v1/subsidies/?enterprise_customer_uuid={uuid}&subsidy_type={"learner_credit","subscription"}
     *   GET /api/v1/subsidies/{subsidy_uuid}/
     *   GET /api/v1/subsidies/{subsidy_uuid}/can_redeem/
     */
    get: operations["api_v1_subsidies_retrieve"];
    /**
     * @description Update a subsidy
     *
     * Endpoint Location: PUT /api/v1/subsidies/{uuid}/
     */
    put: operations["api_v1_subsidies_update"];
    /**
     * @description Soft delete a subsidy by setting its is_soft_deleted field to True
     *
     * Endpoint Location: DELETE /api/v1/subsidies/{uuid}/
     */
    delete: operations["api_v1_subsidies_destroy"];
    /**
     * @description Partially update a subsidy
     *
     * Endpoint Location: PATCH /api/v1/subsidies/{uuid}/
     */
    patch: operations["api_v1_subsidies_partial_update"];
  };
  "/api/v1/subsidies/{uuid}/aggregates-by-learner": {
    /**
     * @description Fetch aggregated data by learner pertaining to a subsidy. Response data is not paginated.
     *
     * Endpoint Location: GET /api/v1/subsidies/{uuid}/aggregates-by-learner
     */
    get: operations["api_v1_subsidies_aggregates_by_learner_retrieve"];
  };
  "/api/v1/subsidies/{uuid}/can_redeem/": {
    /**
     * @description Answers the query "can the given user redeem for the given content_key
     * in this subsidy?"
     *
     * Returns an object indicating if there is sufficient value remainin in the
     * subsidy for this content, along with the quantity/unit required.
     * Note that this endpoint will determine the price of the given content key
     * from the course-discovery service. The caller of this endpoint need not provide a price.
     */
    get: operations["api_v1_subsidies_can_redeem_retrieve"];
  };
  "/api/v1/subsidies/{uuid}/get_aggregates_by_learner/": {
    /**
     * @description Fetch aggregated data by learner pertaining to a subsidy. Response data is not paginated.
     *
     * Endpoint Location: GET /api/v1/subsidies/{uuid}/aggregates-by-learner
     */
    get: operations["api_v1_subsidies_get_aggregates_by_learner_retrieve"];
  };
  "/api/v1/transactions/": {
    /**
     * @description List Transactions.
     *
     * Implemented as a passthrough to super, but require a `subsidy_uuid` query param.
     *
     * Endpoint Location:
     * GET /api/v1/transactions/?subsidy_uuid=<subsidy_uuid>&enterprise_customer_uuid=<enterprise_customer_uui>
     *
     * Request Arguments:
     * - ``subsidy_uuid`` (query param, required):
     *       The uuid (primary key) of the subsidy from which transactions should be listed.
     * - ``enterprise_customer_uuid`` (query param, optional):
     *       Filter the output to only include transactions part of subsidies corresponding to the given enterprise
     *       customer UUID.
     * - ``subsidy_access_policy_uuid`` (query param, optional):
     *       Filter the output to only include transactions created by the given subsidy access policy UUID.
     * - ``lms_user_id`` (query_param, optional):
     *       Filter the output to only include transactions assoicated with the given learner ID.
     * - ``content_key`` (query_param, optional):
     *       Filter the output to only include transactions assoicated with the given content_key.
     * - ``include_aggregates`` (query_param, optional):
     *       If "true", include the ``aggregates`` key (quantities, number of transactions) in the response.
     *
     * Response codes:
     * - ``400``: If there are missing or otherwise invalid input parameters.  Response body is JSON with a single
     * `Error` key.
     * - ``200``: In all other cases, return 200 regardless of whether any transactions were found.  Response body is
     * JSON with a paginated list of serialized Transactions.
     */
    get: operations["api_v1_transactions_list"];
    /**
     * @description Attempt to redeem subsidy for a given user and content.
     *
     * This is called to create an enrollment (or entitlement) and associated Transaction.
     *
     * Endpoint Location: POST /api/v1/transactions/
     *
     * Request Arguments:
     * - ``subsidy_uuid`` (POST data, required):
     *       The uuid (primary key) of the subsidy for which transactions should be created.
     * - ``lms_user_id`` (POST data, required):
     *       The user for whom the transaction is written and for which a fulfillment should occur.
     * - ``content_key`` (POST data, required):
     *       The content for which a fulfillment is created.
     * - ``subsidy_access_policy_uuid`` (POST data, required):
     *       The uuid of the policy that allowed the ledger transaction to be created.
     *
     * Returns:
     *     rest_framework.response.Response:
     *         400: There are missing or otherwise invalid input parameters.  Response body is JSON with a single
     *              `Error` key.
     *         403: The requester has insufficient create permissions.  Response body is JSON with a single `Error`
     *              key.
     *         422: The subisdy is not redeemable in a way that IS NOT retryable (e.g. the balance is too low, or
     *              content is not in catalog, etc.).  Response body is JSON with a
     *              single `Error` key.
     *         429: The subisdy is not redeemable in a way that IS retryable (e.g. something else is already holding a
     *              lock on the requested Ledger).  Response body is JSON with a single
     *              `Error` key.
     *         201: A Transaction was successfully created.  Response body is JSON with a serialized Transaction.
     */
    post: operations["api_v1_transactions_create"];
  };
  "/api/v1/transactions/{uuid}/": {
    /**
     * @description Retrieve Transactions.
     *
     * Implemented as a passthrough to super.
     *
     * Endpoint Location: GET /api/v1/transactions/<transaction_uuid>
     *
     * Request Arguments:
     * - ``transaction_uuid`` (URL location, required):
     *       The uuid (primary key) of the subsidy from which transactions should be listed.
     *
     * Returns:
     *     rest_framework.response.Response:
     *         403/404: If the requester does not have permission to access the transaction, or it does not exist.
     *         200: If a Transaction was successfully retrieved.  Response body is JSON with a serialized Transaction.
     */
    get: operations["api_v1_transactions_retrieve"];
  };
  "/api/v2/subsidies/{subsidy_uuid}/admin/deposits/": {
    /**
     * @description A create-only API view for deposits.
     *
     * This is only accessible to admins of the related subsidy's enterprise customer.
     */
    post: operations["api_v2_subsidies_admin_deposits_create"];
  };
  "/api/v2/subsidies/{subsidy_uuid}/admin/transactions/": {
    /**
     * @description A list view that is accessible only to admins
     * of the related subsidy's enterprise customer.  It lists all transactions
     * for the requested subsidy, or a subset thereof, depending on the query parameters.
     *
     * Note that `TransactionListPaginator`, the pagination_class for this view,
     * allows for the inclusion of an `include_aggregates` query parameter,
     * which if set to `true`, will include an `aggregates` key in the response
     * describing the total quantity of transactions returned in the response `results`.
     */
    get: operations["api_v2_subsidies_admin_transactions_list"];
    /**
     * @description A create view that is accessible only to operators of the system.
     *
     * It creates (or just gets, if a matching Transaction is found with same ledger and idempotency_key) a
     * transaction via the `Subsidy.redeem()` method.  Normally, the logic of this view
     * is responsible for determining the price of the requested content key, with which
     * the redeemed transaction's quantity will be valued.
     *
     * Note that, under some circumstances (for example, assigned learner content), it is
     * appropriate and allowable for the *caller* of this view to request a specific price
     * at which a redeemed transaction should occur.  In these circumstances, this service
     * still does some validation of the requested price to ensure that it falls within
     * a reasonable interval around the *true* price of the related content key. See:
     *
     * https://github.com/openedx/enterprise-access/blob/main/docs/decisions/0012-assignment-based-policies.rst
     * https://github.com/openedx/enterprise-access/blob/main/docs/decisions/0014-assignment-price-validation.rst
     */
    post: operations["api_v2_subsidies_admin_transactions_create"];
  };
  "/api/v2/subsidies/{subsidy_uuid}/transactions/": {
    /**
     * @description Lists all transactions in the given ``subsidy_uuid`` with an ``lms_user_id``
     * value equal to the requesting user's lms user id.
     */
    get: operations["api_v2_subsidies_transactions_list"];
  };
  "/csrf/api/v1/token": {
    /** @description GET /csrf/api/v1/token */
    get: operations["csrf_api_v1_token_retrieve"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @description Serializer for providing responses to queries about redeemability
     * for a particular user id and content_key.
     */
    CanRedeemResponse: {
      /**
       * @description Whether the provided learner/content can redeem via this Subsidy.
       * @default true
       */
      can_redeem?: boolean;
      /**
       * @description The price of the queried content_key.
       * @default 1
       */
      content_price?: number;
      /**
       * @description The unit in which price is denominated.
       * @default usd_cents
       */
      unit?: string;
      /** @description All existing transactions for the requested combination of (subsidy, access policy, lms_user_id, content_key).  This includes active (committed without reversal), reversed, failed, pending, or created transactions. */
      all_transactions?: components["schemas"]["Transaction"][] | null;
      /**
       * @description Whether the subsidy is considered `is_active` and not expired.
       * @default false
       */
      active?: boolean;
    };
    /**
     * @description * `bulk-enrollment-prepay` - bulk-enrollment-prepay
     * * `partner-no-rev-prepay` - partner-no-rev-prepay
     * @enum {string}
     */
    DefaultRevenueCategoryEnum: "bulk-enrollment-prepay" | "partner-no-rev-prepay";
    /** @description Serializer for creating instances of the `Transaction` model. */
    DepositCreationRequest: {
      /**
       * Format: int64
       * @description How many units to deposit via related transaction.
       */
      desired_deposit_quantity: number;
      /** @description ('The reference ID for the specific sales contract which beget this deposit. The source system which ', 'stores the sales object is identified by the sales_contract_reference_provider field.') */
      sales_contract_reference_id: string | null;
      /** @description A unique slug for this sales contract reference provider. */
      sales_contract_reference_provider: string;
      /** @description An optional idempotency key that a client may want to associate with the related Transaction instance to be created. */
      idempotency_key?: string;
      /** @description Any additional metadata that a client may want to associate with the related Transaction instance to be created. */
      metadata?: unknown;
    };
    /** @description Read-only serializer for responding with data about errors. */
    Exception: {
      /** @description A description of the reason for the error. */
      detail: string;
    };
    PaginatedSubsidyList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["Subsidy"][];
    };
    PaginatedTransactionList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["Transaction"][];
    };
    /** @description Serializer for updating a subsidy */
    PatchedSubsidyUpdateRequest: {
      /** @description A human-readable title decided by the staff that is provisioning this Subisdy for the customer. */
      title?: string | null;
      /**
       * Format: uuid
       * @description UUID of the enterprise customer assigned this Subsidy.
       */
      enterprise_customer_uuid?: string;
      /**
       * Format: date-time
       * @description The datetime when this Subsidy is considered active.  If null, this Subsidy is considered inactive.
       */
      active_datetime?: string | null;
      /**
       * Format: date-time
       * @description The datetime when this Subsidy is considered expired.  If null, this Subsidy is considered active.
       */
      expiration_datetime?: string | null;
      /**
       * @description Unit of currency used for all values of quantity for this Subsidy and associated transactions.
       *
       * * `usd_cents` - U.S. Dollar (Cents)
       * * `seats` - Seats in a course
       */
      unit?: components["schemas"]["UnitEnum"];
      /** @description Identifier of the upstream Salesforce object that represents the deal that led to the creation of this Subsidy. */
      reference_id?: string | null;
      /**
       * @description The type of object identified by the <code>reference_id</code> field.  Likely to be a type of Salesforce object.
       *
       * * `salesforce_opportunity_line_item` - Salesforce OpportunityLineItem (i.e. Opportunity Product)
       */
      reference_type?: components["schemas"]["ReferenceTypeEnum"];
      /** @description If set, this subsidy will not be customer facing, nor have any influence on enterprise customers. */
      internal_only?: boolean;
      /**
       * @description Control how revenue is recognized for subsidized enrollments.  In spirit, this is equivalent to the "Cataloge Category" for Coupons.  This field is only used downstream analytics and does not change any business logic.
       *
       * * `bulk-enrollment-prepay` - bulk-enrollment-prepay
       * * `partner-no-rev-prepay` - partner-no-rev-prepay
       */
      revenue_category?: components["schemas"]["RevenueCategoryEnum"];
    };
    /**
     * @description * `salesforce_opportunity_line_item` - Salesforce OpportunityLineItem (i.e. Opportunity Product)
     * @enum {string}
     */
    ReferenceTypeEnum: "salesforce_opportunity_line_item";
    /**
     * @description * `bulk-enrollment-prepay` - bulk-enrollment-prepay
     * * `partner-no-rev-prepay` - partner-no-rev-prepay
     * @enum {string}
     */
    RevenueCategoryEnum: "bulk-enrollment-prepay" | "partner-no-rev-prepay";
    /** @description Serializer for the `Reversal` model. */
    Reversal: {
      /** Format: uuid */
      uuid: string;
      /**
       * @description The current state of the Transaction. One of: ['Created', 'Pending', 'Committed', 'Failed']
       *
       * * `created` - Created
       * * `pending` - Pending
       * * `committed` - Committed
       * * `failed` - Failed
       */
      state?: components["schemas"]["StateEnum"];
      /** @description An idempotency key is a unique value generated by the client of the Ledger API which the Ledger and Transaction APIs use to recognize subsequent retries of the same redemption (i.e. a Transaction that leads to the fulfillment of an enrollment or entitlement for a particular user id in a particular content key).We suggest incorporating V4 UUIDs along with sufficiently unique or random values representing the desired redemption to avoid unintended collisions.In particular, a Transaction's idempotency_key should incorporate it's corresponding ledger's idempotency_key.Utility methods are provided in the ``utils.py`` module to help clients generate appropriate idempotency keys. */
      idempotency_key: string;
      /**
       * Format: int64
       * @description How many units (as defined in the associated Ledger instance) this Transaction represents.
       */
      quantity: number;
      /** @description Any additional metadata that a client may want to associate with this Reversal instance. */
      metadata: unknown;
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      modified: string;
    };
    /**
     * @description * `created` - Created
     * * `pending` - Pending
     * * `committed` - Committed
     * * `failed` - Failed
     * @enum {string}
     */
    StateEnum: "created" | "pending" | "committed" | "failed";
    /** @description Serializer for the `Subsidy` model. */
    Subsidy: {
      /** Format: uuid */
      uuid: string;
      /** @description A human-readable title decided by the staff that is provisioning this Subisdy for the customer. */
      title?: string | null;
      /**
       * Format: uuid
       * @description UUID of the enterprise customer assigned this Subsidy.
       */
      enterprise_customer_uuid: string;
      /**
       * Format: date-time
       * @description The datetime when this Subsidy is considered active.  If null, this Subsidy is considered inactive.
       */
      active_datetime?: string | null;
      /**
       * Format: date-time
       * @description The datetime when this Subsidy is considered expired.  If null, this Subsidy is considered active.
       */
      expiration_datetime?: string | null;
      /**
       * @description Unit of currency used for all values of quantity for this Subsidy and associated transactions.
       *
       * * `usd_cents` - U.S. Dollar (Cents)
       * * `seats` - Seats in a course
       */
      unit?: components["schemas"]["UnitEnum"];
      /** @description Identifier of the upstream Salesforce object that represents the deal that led to the creation of this Subsidy. */
      reference_id?: string | null;
      /**
       * @description The type of object identified by the <code>reference_id</code> field.  Likely to be a type of Salesforce object.
       *
       * * `salesforce_opportunity_line_item` - Salesforce OpportunityLineItem (i.e. Opportunity Product)
       */
      reference_type?: components["schemas"]["ReferenceTypeEnum"];
      /** @description The current (remaining) balance of this subsidy. */
      current_balance: number;
      /** @description The positive balance this Subidy will be initially provisioned to start with. */
      starting_balance: number;
      /** @description If set, this subsidy will not be customer facing, nor have any influence on enterprise customers. */
      internal_only?: boolean;
      /**
       * @description Control how revenue is recognized for subsidized enrollments.  In spirit, this is equivalent to the "Cataloge Category" for Coupons.  This field is only used downstream analytics and does not change any business logic.
       *
       * * `bulk-enrollment-prepay` - bulk-enrollment-prepay
       * * `partner-no-rev-prepay` - partner-no-rev-prepay
       */
      revenue_category?: components["schemas"]["RevenueCategoryEnum"];
      /** @description Whether this subsidy is currently active. */
      is_active: boolean;
      /** @description The aggregate of the initial balance plus all adjustments made on the subsidy in usd cents */
      total_deposits: number;
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      modified: string;
    };
    /** @description Serializer for creating a subsidy request */
    SubsidyCreationRequest: {
      /** @description Identifier of the upstream Salesforce object that represents the deal that led to the creation of this Subsidy. For test subsidy records, see the note below about ``default_internal_only``. */
      reference_id: string;
      /** @description A human-readable title decided by the staff that is provisioning this Subisdy for the customer. */
      default_title: string;
      /**
       * Format: uuid
       * @description UUID of the enterprise customer assigned this Subsidy.
       */
      default_enterprise_customer_uuid: string;
      /**
       * Format: date-time
       * @description The datetime when this Subsidy is considered active.  If null, this Subsidy is considered active.
       */
      default_active_datetime: string;
      /**
       * Format: date-time
       * @description The datetime when this Subsidy is considered expired.  If null, this Subsidy is considered active.
       */
      default_expiration_datetime: string;
      /** @description Unit of currency used for all values of quantity for this Subsidy and associated transactions. */
      default_unit: string;
      /** @description The positive balance this Subidy will be initially provisioned to start with. */
      default_starting_balance: number;
      /**
       * @description Control how revenue is recognized for subsidized enrollments.  In spirit, this is equivalent to the "Cataloge Category" for Coupons.  This field is only used downstream analytics and does not change any business logic.
       *
       * * `bulk-enrollment-prepay` - bulk-enrollment-prepay
       * * `partner-no-rev-prepay` - partner-no-rev-prepay
       */
      default_revenue_category: components["schemas"]["DefaultRevenueCategoryEnum"];
      /** @description If set, this subsidy will not be customer facing, nor have any influence on enterprise customers.If ``default_internal_only`` is False and an existing subsidy is found with the given ``reference_id``, all `default_*` arguments are ignored and this view returns that existing record. However, when ``default_internal_only`` is True, this view will simply create a new record, regardless of any existing records with the same ``reference_id`` (we assume that the reference_id is essentially meaningless for test subsidy records). */
      default_internal_only: boolean;
    };
    /** @description Serializer for providing responses to queries about aggregate enrollment data for a particular subsidy */
    SubsidyLearnerAggregate: {
      /** @description User ID associated with user tied to a subsidy's transaction. */
      lms_user_id: number;
      /** @description Number of enrollments found for the user. */
      total: number;
    };
    /** @description Serializer for updating a subsidy */
    SubsidyUpdateRequest: {
      /** @description A human-readable title decided by the staff that is provisioning this Subisdy for the customer. */
      title?: string | null;
      /**
       * Format: uuid
       * @description UUID of the enterprise customer assigned this Subsidy.
       */
      enterprise_customer_uuid: string;
      /**
       * Format: date-time
       * @description The datetime when this Subsidy is considered active.  If null, this Subsidy is considered inactive.
       */
      active_datetime?: string | null;
      /**
       * Format: date-time
       * @description The datetime when this Subsidy is considered expired.  If null, this Subsidy is considered active.
       */
      expiration_datetime?: string | null;
      /**
       * @description Unit of currency used for all values of quantity for this Subsidy and associated transactions.
       *
       * * `usd_cents` - U.S. Dollar (Cents)
       * * `seats` - Seats in a course
       */
      unit?: components["schemas"]["UnitEnum"];
      /** @description Identifier of the upstream Salesforce object that represents the deal that led to the creation of this Subsidy. */
      reference_id?: string | null;
      /**
       * @description The type of object identified by the <code>reference_id</code> field.  Likely to be a type of Salesforce object.
       *
       * * `salesforce_opportunity_line_item` - Salesforce OpportunityLineItem (i.e. Opportunity Product)
       */
      reference_type?: components["schemas"]["ReferenceTypeEnum"];
      /** @description If set, this subsidy will not be customer facing, nor have any influence on enterprise customers. */
      internal_only?: boolean;
      /**
       * @description Control how revenue is recognized for subsidized enrollments.  In spirit, this is equivalent to the "Cataloge Category" for Coupons.  This field is only used downstream analytics and does not change any business logic.
       *
       * * `bulk-enrollment-prepay` - bulk-enrollment-prepay
       * * `partner-no-rev-prepay` - partner-no-rev-prepay
       */
      revenue_category?: components["schemas"]["RevenueCategoryEnum"];
    };
    /**
     * @description Serializer for the `Transaction` model.
     *
     * When using this serializer on a queryset, it can help with performance to select_related reversals:
     *
     *   Transaction.objects.select_related("reversal")
     */
    Transaction: {
      /** Format: uuid */
      uuid: string;
      /**
       * @description The current state of the Transaction. One of: ['Created', 'Pending', 'Committed', 'Failed']
       *
       * * `created` - Created
       * * `pending` - Pending
       * * `committed` - Committed
       * * `failed` - Failed
       */
      state?: components["schemas"]["StateEnum"];
      /** @description An idempotency key is a unique value generated by the client of the Ledger API which the Ledger and Transaction APIs use to recognize subsequent retries of the same redemption (i.e. a Transaction that leads to the fulfillment of an enrollment or entitlement for a particular user id in a particular content key).We suggest incorporating V4 UUIDs along with sufficiently unique or random values representing the desired redemption to avoid unintended collisions.In particular, a Transaction's idempotency_key should incorporate it's corresponding ledger's idempotency_key.Utility methods are provided in the ``utils.py`` module to help clients generate appropriate idempotency keys. */
      idempotency_key: string;
      /** @description The id of the Open edX LMS user record with which this Transaction is associated. */
      lms_user_id?: number | null;
      /** @description The email of the Open edX LMS user record with which this Transaction is associated.The email is captured at the time the Transaction is created and may not be up to date. */
      lms_user_email?: string | null;
      /** @description The globally unique content identifier.  Joinable with ContentMetadata.content_key in enterprise-catalog. */
      content_key?: string | null;
      /** @description Identifier for the parent of the content_key.  Also should be joinable with ContentMetadata.content_key in enterprise-catalog. In practice, this is the course key corresponding to a course run key. */
      parent_content_key?: string | null;
      /** @description The title of the content associated with this Transaction.The title is captured at the time the Transaction is created and may not be up to date. */
      content_title?: string | null;
      /**
       * Format: int64
       * @description How many units (as defined in the associated Ledger instance) this Transaction represents.
       */
      quantity: number;
      /** @description The unit in which this transaction's quantity is denominated. */
      unit: components["schemas"]["UnitEnum"];
      /** @description The UUID identifier of the subsidized enrollment record for a learner generated durning the enrollmentcall made to enterprise/edx platform e.g. a LearnerCreditEnterpriseCourseEnrollment UUID. */
      fulfillment_identifier?: string | null;
      /**
       * Format: uuid
       * @description A reference to the subsidy access policy which was used to create a transaction for the content.
       */
      subsidy_access_policy_uuid?: string | null;
      /** @description Any additional metadata that a client may want to associate with this Transaction instance. */
      metadata: unknown;
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      modified: string;
      reversal: components["schemas"]["Reversal"];
      external_reference: string[];
      /**
       * Format: uri
       * @description The URL to the transaction status API endpoint for this transaction.
       */
      transaction_status_api_url: string;
      /**
       * Format: uri
       * @description The URL to the courseware page for this transaction's content_key.The courseware_url today only supports OCM courses, and should not be used for external, non-OCM course types.
       */
      courseware_url: string;
    };
    /** @description Serializer for creating instances of the `Transaction` model. */
    TransactionCreationRequest: {
      /** @description An idempotency key is a unique value generated by the client of the Ledger API which the Ledger and Transaction APIs use to recognize subsequent retries of the same redemption (i.e. a Transaction that leads to the fulfillment of an enrollment or entitlement for a particular user id in a particular content key).We suggest incorporating V4 UUIDs along with sufficiently unique or random values representing the desired redemption to avoid unintended collisions.In particular, a Transaction's idempotency_key should incorporate it's corresponding ledger's idempotency_key.Utility methods are provided in the ``utils.py`` module to help clients generate appropriate idempotency keys. */
      idempotency_key?: string;
      /** @description The id of the Open edX LMS user record with which this Transaction is associated. */
      lms_user_id: number | null;
      /** @description The globally unique content identifier.  Joinable with ContentMetadata.content_key in enterprise-catalog. */
      content_key: string | null;
      /**
       * Format: uuid
       * @description A reference to the subsidy access policy which was used to create a transaction for the content.
       */
      subsidy_access_policy_uuid: string | null;
      /** @description Any additional metadata that a client may want to associate with this Transaction instance. */
      metadata?: unknown;
      /** @description The price, in USD cents, at which the caller requests the redemption be made. Must be >= 0. */
      requested_price_cents?: number | null;
    };
    /**
     * @description * `usd_cents` - U.S. Dollar (Cents)
     * * `seats` - Seats in a course
     * @enum {string}
     */
    UnitEnum: "usd_cents" | "seats";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * @description GET entry point for the `ContentMetadataViewSet`
   *
   * Fetches subsidy related content metadata.
   *
   * Returns:
   *     Subsidy content metadata payload:
   *         content_uuid (uuid4): UUID identifier conencted to the content
   *         content_key (str): String content key identifier connected to the content
   *         source (str): Product source string, as of 3/16/23 this is either `2u` or `edX`.
   *         content_price (float): Float representation of the course price in USD cents,
   *           read from either the ``first_enrollable_paid_seat_price`` or from ``entitlements``
   *           for the content.
   *
   *     404 Content Not Found IFF
   *         - The content identifier does not exist OR the content is not connected to the enterprise customer
   *             via an enterprise catalog query
   *         - The content metadata payload does not contain an appropriate entitlement mode and price or the
   *             content's associated product source
   */
  api_v1_content_metadata_retrieve: {
    parameters: {
      query: {
        /** @description The UUID associated with the requesting user's enterprise customer. */
        enterprise_customer_uuid: string;
      };
      path: {
        content_identifier: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  /**
   * @description ViewSet for the Subsidy model.
   *
   * Currently, this only supports listing, reading, and testing subsidies::
   *
   *   GET /api/v1/subsidies/?enterprise_customer_uuid={uuid}&subsidy_type={"learner_credit","subscription"}
   *   GET /api/v1/subsidies/{subsidy_uuid}/
   *   GET /api/v1/subsidies/{subsidy_uuid}/can_redeem/
   */
  api_v1_subsidies_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedSubsidyList"];
        };
      };
    };
  };
  /**
   * @description Get or create a new subsidy.  See request payload serialization notes
   * around ``default_internal_only`` and the get-or-create operation.
   *
   * Endpoint Location: POST /api/v1/subsidies/
   */
  api_v1_subsidies_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubsidyCreationRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SubsidyCreationRequest"];
        "multipart/form-data": components["schemas"]["SubsidyCreationRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Subsidy"];
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["Subsidy"];
        };
      };
      400: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      403: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /**
   * @description ViewSet for the Subsidy model.
   *
   * Currently, this only supports listing, reading, and testing subsidies::
   *
   *   GET /api/v1/subsidies/?enterprise_customer_uuid={uuid}&subsidy_type={"learner_credit","subscription"}
   *   GET /api/v1/subsidies/{subsidy_uuid}/
   *   GET /api/v1/subsidies/{subsidy_uuid}/can_redeem/
   */
  api_v1_subsidies_retrieve: {
    parameters: {
      path: {
        /** @description A UUID string identifying this Subsidy. */
        uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Subsidy"];
        };
      };
    };
  };
  /**
   * @description Update a subsidy
   *
   * Endpoint Location: PUT /api/v1/subsidies/{uuid}/
   */
  api_v1_subsidies_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this Subsidy. */
        uuid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubsidyUpdateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SubsidyUpdateRequest"];
        "multipart/form-data": components["schemas"]["SubsidyUpdateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Subsidy"];
        };
      };
      400: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      403: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /**
   * @description Soft delete a subsidy by setting its is_soft_deleted field to True
   *
   * Endpoint Location: DELETE /api/v1/subsidies/{uuid}/
   */
  api_v1_subsidies_destroy: {
    parameters: {
      path: {
        /** @description A UUID string identifying this Subsidy. */
        uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Subsidy"];
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["Subsidy"];
        };
      };
      400: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      403: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /**
   * @description Partially update a subsidy
   *
   * Endpoint Location: PATCH /api/v1/subsidies/{uuid}/
   */
  api_v1_subsidies_partial_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this Subsidy. */
        uuid: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedSubsidyUpdateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedSubsidyUpdateRequest"];
        "multipart/form-data": components["schemas"]["PatchedSubsidyUpdateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Subsidy"];
        };
      };
      400: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      403: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /**
   * @description Fetch aggregated data by learner pertaining to a subsidy. Response data is not paginated.
   *
   * Endpoint Location: GET /api/v1/subsidies/{uuid}/aggregates-by-learner
   */
  api_v1_subsidies_aggregates_by_learner_retrieve: {
    parameters: {
      query?: {
        /** @description The UUID associated with the subsidy access policy to which the query pertains. */
        subsidy_access_policy_uuid?: string;
      };
      path: {
        uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubsidyLearnerAggregate"];
        };
      };
      400: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      403: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /**
   * @description Answers the query "can the given user redeem for the given content_key
   * in this subsidy?"
   *
   * Returns an object indicating if there is sufficient value remainin in the
   * subsidy for this content, along with the quantity/unit required.
   * Note that this endpoint will determine the price of the given content key
   * from the course-discovery service. The caller of this endpoint need not provide a price.
   */
  api_v1_subsidies_can_redeem_retrieve: {
    parameters: {
      query: {
        /** @description The content key/identifier to which the query pertains. */
        content_key: string;
        /** @description The user identifier to whom the query pertains. */
        lms_user_id: number;
      };
      path: {
        /** @description A UUID string identifying this Subsidy. */
        uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CanRedeemResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
    };
  };
  /**
   * @description Fetch aggregated data by learner pertaining to a subsidy. Response data is not paginated.
   *
   * Endpoint Location: GET /api/v1/subsidies/{uuid}/aggregates-by-learner
   */
  api_v1_subsidies_get_aggregates_by_learner_retrieve: {
    parameters: {
      query?: {
        /** @description The UUID associated with the subsidy access policy to which the query pertains. */
        subsidy_access_policy_uuid?: string;
      };
      path: {
        /** @description A UUID string identifying this Subsidy. */
        uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubsidyLearnerAggregate"];
        };
      };
      400: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      403: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      500: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /**
   * @description List Transactions.
   *
   * Implemented as a passthrough to super, but require a `subsidy_uuid` query param.
   *
   * Endpoint Location:
   * GET /api/v1/transactions/?subsidy_uuid=<subsidy_uuid>&enterprise_customer_uuid=<enterprise_customer_uui>
   *
   * Request Arguments:
   * - ``subsidy_uuid`` (query param, required):
   *       The uuid (primary key) of the subsidy from which transactions should be listed.
   * - ``enterprise_customer_uuid`` (query param, optional):
   *       Filter the output to only include transactions part of subsidies corresponding to the given enterprise
   *       customer UUID.
   * - ``subsidy_access_policy_uuid`` (query param, optional):
   *       Filter the output to only include transactions created by the given subsidy access policy UUID.
   * - ``lms_user_id`` (query_param, optional):
   *       Filter the output to only include transactions assoicated with the given learner ID.
   * - ``content_key`` (query_param, optional):
   *       Filter the output to only include transactions assoicated with the given content_key.
   * - ``include_aggregates`` (query_param, optional):
   *       If "true", include the ``aggregates`` key (quantities, number of transactions) in the response.
   *
   * Response codes:
   * - ``400``: If there are missing or otherwise invalid input parameters.  Response body is JSON with a single
   * `Error` key.
   * - ``200``: In all other cases, return 200 regardless of whether any transactions were found.  Response body is
   * JSON with a paginated list of serialized Transactions.
   */
  api_v1_transactions_list: {
    parameters: {
      query?: {
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
        /** @description A search term. */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTransactionList"];
        };
      };
    };
  };
  /**
   * @description Attempt to redeem subsidy for a given user and content.
   *
   * This is called to create an enrollment (or entitlement) and associated Transaction.
   *
   * Endpoint Location: POST /api/v1/transactions/
   *
   * Request Arguments:
   * - ``subsidy_uuid`` (POST data, required):
   *       The uuid (primary key) of the subsidy for which transactions should be created.
   * - ``lms_user_id`` (POST data, required):
   *       The user for whom the transaction is written and for which a fulfillment should occur.
   * - ``content_key`` (POST data, required):
   *       The content for which a fulfillment is created.
   * - ``subsidy_access_policy_uuid`` (POST data, required):
   *       The uuid of the policy that allowed the ledger transaction to be created.
   *
   * Returns:
   *     rest_framework.response.Response:
   *         400: There are missing or otherwise invalid input parameters.  Response body is JSON with a single
   *              `Error` key.
   *         403: The requester has insufficient create permissions.  Response body is JSON with a single `Error`
   *              key.
   *         422: The subisdy is not redeemable in a way that IS NOT retryable (e.g. the balance is too low, or
   *              content is not in catalog, etc.).  Response body is JSON with a
   *              single `Error` key.
   *         429: The subisdy is not redeemable in a way that IS retryable (e.g. something else is already holding a
   *              lock on the requested Ledger).  Response body is JSON with a single
   *              `Error` key.
   *         201: A Transaction was successfully created.  Response body is JSON with a serialized Transaction.
   */
  api_v1_transactions_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Transaction"];
        "application/x-www-form-urlencoded": components["schemas"]["Transaction"];
        "multipart/form-data": components["schemas"]["Transaction"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Transaction"];
        };
      };
    };
  };
  /**
   * @description Retrieve Transactions.
   *
   * Implemented as a passthrough to super.
   *
   * Endpoint Location: GET /api/v1/transactions/<transaction_uuid>
   *
   * Request Arguments:
   * - ``transaction_uuid`` (URL location, required):
   *       The uuid (primary key) of the subsidy from which transactions should be listed.
   *
   * Returns:
   *     rest_framework.response.Response:
   *         403/404: If the requester does not have permission to access the transaction, or it does not exist.
   *         200: If a Transaction was successfully retrieved.  Response body is JSON with a serialized Transaction.
   */
  api_v1_transactions_retrieve: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Transaction"];
        };
      };
    };
  };
  /**
   * @description A create-only API view for deposits.
   *
   * This is only accessible to admins of the related subsidy's enterprise customer.
   */
  api_v2_subsidies_admin_deposits_create: {
    parameters: {
      path: {
        subsidy_uuid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DepositCreationRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DepositCreationRequest"];
        "multipart/form-data": components["schemas"]["DepositCreationRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DepositCreationRequest"];
        };
      };
    };
  };
  /**
   * @description A list view that is accessible only to admins
   * of the related subsidy's enterprise customer.  It lists all transactions
   * for the requested subsidy, or a subset thereof, depending on the query parameters.
   *
   * Note that `TransactionListPaginator`, the pagination_class for this view,
   * allows for the inclusion of an `include_aggregates` query parameter,
   * which if set to `true`, will include an `aggregates` key in the response
   * describing the total quantity of transactions returned in the response `results`.
   */
  api_v2_subsidies_admin_transactions_list: {
    parameters: {
      query?: {
        /** @description The globally unique content identifier.  Joinable with ContentMetadata.content_key in enterprise-catalog. */
        content_key?: string;
        /** @description The id of the Open edX LMS user record with which this Transaction is associated. */
        lms_user_id?: number;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
        /** @description A search term. */
        search?: string;
        /**
         * @description The current state of the Transaction. One of: ['Created', 'Pending', 'Committed', 'Failed']
         *
         * * `created` - Created
         * * `pending` - Pending
         * * `committed` - Committed
         * * `failed` - Failed
         */
        state?: ("committed" | "created" | "failed" | "pending")[];
        /** @description A reference to the subsidy access policy which was used to create a transaction for the content. */
        subsidy_access_policy_uuid?: string;
      };
      path: {
        subsidy_uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTransactionList"];
        };
      };
      403: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /**
   * @description A create view that is accessible only to operators of the system.
   *
   * It creates (or just gets, if a matching Transaction is found with same ledger and idempotency_key) a
   * transaction via the `Subsidy.redeem()` method.  Normally, the logic of this view
   * is responsible for determining the price of the requested content key, with which
   * the redeemed transaction's quantity will be valued.
   *
   * Note that, under some circumstances (for example, assigned learner content), it is
   * appropriate and allowable for the *caller* of this view to request a specific price
   * at which a redeemed transaction should occur.  In these circumstances, this service
   * still does some validation of the requested price to ensure that it falls within
   * a reasonable interval around the *true* price of the related content key. See:
   *
   * https://github.com/openedx/enterprise-access/blob/main/docs/decisions/0012-assignment-based-policies.rst
   * https://github.com/openedx/enterprise-access/blob/main/docs/decisions/0014-assignment-price-validation.rst
   */
  api_v2_subsidies_admin_transactions_create: {
    parameters: {
      path: {
        subsidy_uuid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionCreationRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["TransactionCreationRequest"];
        "multipart/form-data": components["schemas"]["TransactionCreationRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Transaction"];
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["Transaction"];
        };
      };
      403: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      422: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      429: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /**
   * @description Lists all transactions in the given ``subsidy_uuid`` with an ``lms_user_id``
   * value equal to the requesting user's lms user id.
   */
  api_v2_subsidies_transactions_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
      path: {
        subsidy_uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTransactionList"];
        };
      };
      403: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /** @description GET /csrf/api/v1/token */
  csrf_api_v1_token_retrieve: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
}
