/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/{enterprise_uuid}/delete-group-association/{group_uuid}": {
    /**
     * Delete a PolicyGroupAssociation record.
     * @description Delete all `PolicyGroupAssociation` records associated with the group uuid.
     * Params:
     *     enterprise_uuid: (required) The enterprise customer associated with the EnterpriseGroup
     *     group_uuid: (required) The uuid associated with the EnterpriseGroup in edx-enterprise
     */
    delete: operations["api_v1_delete_group_association_destroy"];
  };
  "/api/v1/admin-view/learner_profile/": {
    /**
     * Retrieve a profile for a learner from the admin portal.
     * @description Retrieves all licenses, subscriptions, and enrollments associated with
     * a learner's email address, LMS user ID, and enterprise.
     */
    get: operations["api_v1_admin_view_learner_profile_retrieve"];
  };
  "/api/v1/assignment-configurations/": {
    /**
     * List content assignment configurations.
     * @description Lists ``AssignmentConfiguration`` records, filtered by the given query parameters.
     *
     * TODO: implement a ``subsidy_access_policy`` filter.
     */
    get: operations["api_v1_assignment_configurations_list"];
    /**
     * Get or create a new content assignment configuration for the given subsidy access policy.
     * @description Creates a single ``AssignmentConfiguration`` record.
     */
    post: operations["api_v1_assignment_configurations_create"];
  };
  "/api/v1/assignment-configurations/{assignment_configuration_uuid}/admin/assignments/": {
    /**
     * List content assignments.
     * @description Lists ``LearnerContentAssignment`` records, filtered by the given query parameters.
     */
    get: operations["api_v1_assignment_configurations_admin_assignments_list"];
  };
  "/api/v1/assignment-configurations/{assignment_configuration_uuid}/admin/assignments/{uuid}/": {
    /**
     * Retrieve a content assignment by UUID.
     * @description Retrieves a single ``LearnerContentAssignment`` record by uuid.
     */
    get: operations["api_v1_assignment_configurations_admin_assignments_retrieve"];
  };
  "/api/v1/assignment-configurations/{assignment_configuration_uuid}/admin/assignments/cancel/": {
    /**
     * Cancel assignments by UUID.
     * @description Cancel a list of ``LearnerContentAssignment`` records by uuid.
     *
     * ```
     * Raises:
     *     404 if any of the assignments were not found
     *     422 if any of the assignments threw an error (not found or not cancelable)
     * ```
     */
    post: operations["api_v1_assignment_configurations_admin_assignments_cancel_create"];
  };
  "/api/v1/assignment-configurations/{assignment_configuration_uuid}/admin/assignments/cancel-all/": {
    /**
     * Cancel all assignments for the requested assignment configuration.
     * @description Cancel all ``LearnerContentAssignment`` associated with the given assignment configuration.
     * Optionally, cancel only assignments matching the criteria of the provided query param filters.
     *
     * ```
     * Raises:
     *     404 if no cancelable assignments were found
     *     422 if any of the assignments threw an error (not found or not cancelable)
     * ```
     */
    post: operations["api_v1_assignment_configurations_admin_assignments_cancel_all_create"];
  };
  "/api/v1/assignment-configurations/{assignment_configuration_uuid}/admin/assignments/nudge/": {
    /**
     * Nudge assignments by UUID.
     * @description Send nudges to a list of learners with associated ``LearnerContentAssignment``
     * record by list of uuids.
     *
     * ```
     * Raises:
     *     400 If assignment_uuids list length is 0 or the value for days_before_course_start_date is less than 1
     *     422 If the nudge_assignments call fails for any other reason
     * ```
     */
    post: operations["api_v1_assignment_configurations_admin_assignments_nudge_create"];
  };
  "/api/v1/assignment-configurations/{assignment_configuration_uuid}/admin/assignments/remind/": {
    /**
     * Remind assignments by UUID.
     * @description Send reminders to a list of learners with associated ``LearnerContentAssignment``
     * record by list of uuids.
     *
     * ```
     * Raises:
     *     404 if any of the assignments were not found
     *     422 if any of the assignments threw an error (not found or not remindable)
     * ```
     */
    post: operations["api_v1_assignment_configurations_admin_assignments_remind_create"];
  };
  "/api/v1/assignment-configurations/{assignment_configuration_uuid}/admin/assignments/remind-all/": {
    /**
     * Remind all assignments for the given assignment configuration.
     * @description Send reminders for all assignments related to the given assignment configuration.
     * Optionally, remind only assignments matching the criteria of the provided query param filters.
     *
     * ```
     * Raises:
     *     404 if no cancelable assignments were found
     *     422 if any of the assignments threw an error (not found or not remindable)
     * ```
     */
    post: operations["api_v1_assignment_configurations_admin_assignments_remind_all_create"];
  };
  "/api/v1/assignment-configurations/{assignment_configuration_uuid}/assignments/": {
    /**
     * List content assignments.
     * @description Lists ``LearnerContentAssignment`` records assigned to the requesting user for the given assignment
     * configuration.
     */
    get: operations["api_v1_assignment_configurations_assignments_list"];
  };
  "/api/v1/assignment-configurations/{assignment_configuration_uuid}/assignments/{uuid}/": {
    /**
     * Retrieve content assignments by UUID.
     * @description Retrieves a single ``LearnerContentAssignment`` record by uuid, if assigned to the requesting user for this
     * given assignment configuration.
     */
    get: operations["api_v1_assignment_configurations_assignments_retrieve"];
  };
  "/api/v1/assignment-configurations/{uuid}/": {
    /**
     * Retrieve content assignment configuration by UUID.
     * @description Retrieves a single ``AssignmentConfiguration`` record by uuid.
     */
    get: operations["api_v1_assignment_configurations_retrieve"];
    /**
     * Partially update (with a PUT) a content assignment configuration by UUID.
     * @description Updates a single ``AssignmentConfiguration`` record by uuid.  All fields for the update are optional (which is
     * different from a standard PUT request).
     */
    put: operations["api_v1_assignment_configurations_update"];
    /**
     * Soft-delete content assignment configuration by UUID.
     * @description Soft-delete a single ``AssignmentConfiguration`` record by uuid, and unlink from the associated policy.
     *
     * Note: This endpoint supports an optional "reason" request body parameter, representing the description (free
     * form text) for why the AssignmentConfiguration is being deactivated.
     */
    delete: operations["api_v1_assignment_configurations_destroy"];
    /**
     * Partially update (with a PATCH) a content assignment configuration by UUID.
     * @description Updates a single ``AssignmentConfiguration`` record by uuid.  All fields for the update are optional.
     */
    patch: operations["api_v1_assignment_configurations_partial_update"];
  };
  "/api/v1/assignment-configurations/{uuid}/acknowledge-assignments/": {
    /**
     * Acknowledge assignments for the given AssignmentConfiguration.
     * @description POST API endpoint that allows the authenticated user to acknowledge cancelled and/or expired assignments
     * for the specified AssignmentConfiguration. By acknowledging the assignments in an expired
     * and/or cancelled state, the user is indicating they have seen the assignments and have
     * opted to dismiss them from the UI.
     *
     * This endpoint will return an object containing:
     * - assignments successfully acknowledged
     * - assignments already acknowledged
     * - assignments not acknowledged
     */
    post: operations["api_v1_assignment_configurations_acknowledge_assignments_create"];
  };
  "/api/v1/bffs/learner/academy/": {
    /**
     * Academy route
     * @description Retrieves, transforms, and processes data for the learner academy route.
     */
    post: operations["api_v1_bffs_learner_academy_create"];
  };
  "/api/v1/bffs/learner/dashboard/": {
    /**
     * Dashboard route
     * @description Retrieves, transforms, and processes data for the learner dashboard route.
     */
    post: operations["api_v1_bffs_learner_dashboard_create"];
  };
  "/api/v1/bffs/learner/search/": {
    /**
     * Search route
     * @description Retrieves, transforms, and processes data for the learner search route.
     */
    post: operations["api_v1_bffs_learner_search_create"];
  };
  "/api/v1/bffs/learner/skills-quiz/": {
    /**
     * Skills Quiz route
     * @description Retrieves, transforms, and processes data for the learner skills quiz route.
     */
    post: operations["api_v1_bffs_learner_skills_quiz_create"];
  };
  "/api/v1/coupon-code-requests/": {
    /**
     * Coupon Code request list.
     * @description Viewset for coupon code requests
     */
    get: operations["api_v1_coupon_code_requests_list"];
    /**
     * Coupon Code request create.
     * @description Viewset for coupon code requests
     */
    post: operations["api_v1_coupon_code_requests_create"];
  };
  "/api/v1/coupon-code-requests/{uuid}/": {
    /**
     * Coupon Code request retrieve.
     * @description Viewset for coupon code requests
     */
    get: operations["api_v1_coupon_code_requests_retrieve"];
  };
  "/api/v1/coupon-code-requests/approve/": {
    /**
     * Coupon Code request approve.
     * @description Action of approving a Coupon Subsidy Request
     */
    post: operations["api_v1_coupon_code_requests_approve_create"];
  };
  "/api/v1/coupon-code-requests/decline/": {
    /**
     * Coupon Code request deny.
     * @description Action of declining a Coupon Subsidy Request
     */
    post: operations["api_v1_coupon_code_requests_decline_create"];
  };
  "/api/v1/coupon-code-requests/overview/": {
    /**
     * Coupon Code request overview.
     * @description Returns an overview of subsidy requests count by state.
     */
    get: operations["api_v1_coupon_code_requests_overview_retrieve"];
  };
  "/api/v1/customer-configurations/": {
    /**
     * List customer config.
     * @description Viewset for customer configurations.
     */
    get: operations["api_v1_customer_configurations_list"];
    /**
     * Create customer config.
     * @description Viewset for customer configurations.
     */
    post: operations["api_v1_customer_configurations_create"];
  };
  "/api/v1/customer-configurations/{enterprise_customer_uuid}/": {
    /**
     * Retrieve customer config.
     * @description Viewset for customer configurations.
     */
    get: operations["api_v1_customer_configurations_retrieve"];
    /**
     * Update customer config.
     * @description Viewset for customer configurations.
     */
    patch: operations["api_v1_customer_configurations_partial_update"];
  };
  "/api/v1/license-requests/": {
    /**
     * License request list.
     * @description Viewset for license requests
     */
    get: operations["api_v1_license_requests_list"];
    /**
     * License request create.
     * @description Viewset for license requests
     */
    post: operations["api_v1_license_requests_create"];
  };
  "/api/v1/license-requests/{uuid}/": {
    /**
     * License request retrieve.
     * @description Viewset for license requests
     */
    get: operations["api_v1_license_requests_retrieve"];
  };
  "/api/v1/license-requests/approve/": {
    /**
     * License request approve.
     * @description Action of approving a License Subsidy Request
     */
    post: operations["api_v1_license_requests_approve_create"];
  };
  "/api/v1/license-requests/decline/": {
    /**
     * License request deny.
     * @description Action of declining a License Subsidy Request
     */
    post: operations["api_v1_license_requests_decline_create"];
  };
  "/api/v1/license-requests/overview/": {
    /**
     * License request overview.
     * @description Returns an overview of subsidy requests count by state.
     */
    get: operations["api_v1_license_requests_overview_retrieve"];
  };
  "/api/v1/policy-allocation/{policy_uuid}/allocate/": {
    /**
     * Allocate assignments
     * @description Idempotently creates or updates allocated ``LearnerContentAssignment``
     * records for a requested list of user email addresses, in the requested
     * ``content_key`` and at the requested price of ``content_price_cents``.
     * These assignments are related to the ``AssignmentConfiguration`` of the
     * requested ``AssignedLearnerCreditAccessPolicy`` record.
     */
    post: operations["api_v1_policy_allocation_allocate_create"];
  };
  "/api/v1/policy-redemption/{policy_uuid}/redeem/": {
    /**
     * Redeem with a policy.
     * @description Redeem a policy for given `lms_user_id` and `content_key`
     *
     * status codes::
     *
     *     400: There are missing or otherwise invalid input parameters.
     *     403: The requester has insufficient redeem permissions.
     *     422: The subsidy access policy is not redeemable in a way that IS NOT retryable.
     *     429: The subsidy access policy is not redeemable in a way that IS retryable (e.g. policy currently locked).
     *     200: The policy was successfully redeemed.  Response body is JSON with a serialized Transaction
     *          containing the following keys (sample values):
     *          {
     *              "uuid": "the-transaction-uuid",
     *              "state": "committed",
     *              "idempotency_key": "the-idempotency-key",
     *              "lms_user_id": 54321,
     *              "content_key": "demox_1234+2T2023",
     *              "quantity": 19900,
     *              "unit": "USD_CENTS",
     *              "reference_id": 1234,
     *              "reference_type": "enterprise_fufillment_source_uuid",
     *              "subsidy_access_policy_uuid": "a-policy-uuid",
     *              "metadata": {...},
     *              "created": "created-datetime",
     *              "modified": "modified-datetime",
     *              "reversals": []
     *          }
     */
    post: operations["api_v1_policy_redemption_redeem_create"];
  };
  "/api/v1/policy-redemption/credits_available/": {
    /**
     * List credits available.
     * @description Return a list of all redeemable policies for given `enterprise_customer_uuid`, `lms_user_id` that have
     * redeemable credit available.
     *
     * Note that, for each redeemable policy that is *assignable*, the policy record
     * in the response payload will also contain a list of `learner_content_assignments`
     * associated with the requested `lms_user_id`.
     */
    get: operations["api_v1_policy_redemption_credits_available_list"];
  };
  "/api/v1/policy-redemption/enterprise-customer/{enterprise_customer_uuid}/can-redeem/": {
    /**
     * Can redeem.
     * @description Within a specified enterprise customer, retrieves a single, redeemable access policy (or null)
     * for each ``content_key`` in a provided list of content keys.
     *
     * Returns ``rest_framework.response.Response``:
     *
     *         400: If there are missing or otherwise invalid input parameters.  Response body is JSON with a single
     *              `Error` key.
     *
     *         403: If the requester has insufficient permissions, Response body is JSON with a single `Error` key.
     *
     *         200: If a redeemable access policy was found, an existing redemption was found, or neither.  Response
     *              body is a JSON list of dict containing redemption evaluations for each given content_key.  See
     *              redoc for a sample response.
     */
    get: operations["api_v1_policy_redemption_enterprise_customer_can_redeem_list"];
  };
  "/api/v1/provisioning": {
    /**
     * Create a new provisioning request.
     * @description Create view for provisioning.
     */
    post: operations["api_v1_provisioning_create"];
  };
  "/api/v1/subsidy-access-policies/": {
    /**
     * List subsidy access policies for an enterprise customer.
     * @description Lists `SubsidyAccessPolicy` records, filtered by the
     * given query parameters.
     */
    get: operations["api_v1_subsidy_access_policies_list"];
    /**
     * Create a new subsidy access policy.
     * @description Creates a single `SubsidyAccessPolicy` record, or returns
     * an existing one if an **active** record with the requested (enterprise_customer_uuid,
     * subsidy_uuid, catalog_uuid, access_method) values already exists.
     */
    post: operations["api_v1_subsidy_access_policies_create"];
  };
  "/api/v1/subsidy-access-policies/{uuid}/": {
    /**
     * Retrieve subsidy access policy by UUID.
     * @description Retrieves a single `SubsidyAccessPolicy` record by uuid.
     */
    get: operations["api_v1_subsidy_access_policies_retrieve"];
    /**
     * Partially update (with a PUT) a subsidy access policy by UUID.
     * @description Updates a single `SubsidyAccessPolicy` record by uuid.  All fields for the update are optional
     * (which is different from a standard PUT request).
     */
    put: operations["api_v1_subsidy_access_policies_update"];
    /**
     * Soft-delete subsidy access policy by UUID.
     * @description Soft-delete a single `SubsidyAccessPolicy` record by uuid.
     */
    delete: operations["api_v1_subsidy_access_policies_destroy"];
    /**
     * Partially update (with a PATCH) a subsidy access policy by UUID.
     * @description Updates a single `SubsidyAccessPolicy` record by uuid.  All fields for the update are optional.
     */
    patch: operations["api_v1_subsidy_access_policies_partial_update"];
  };
  "/api/v1/subsidy-access-policies/{uuid}/group-members": {
    /**
     * List group member data with aggregates.
     * @description Retrieves Enterprise Group Members data zipped with subsidy aggregate enrollment data from a group record
     * linked to a subsidy access policy.
     *
     * Params:
     *     group_uuid: (Optional) The Enterprise Group uuid from which to select members. Leave blank to fetch the
     *         first group found in the PolicyGroupAssociation table associated with the supplied SubsidyAccessPolicy.
     *     user_query: (Optional) Query sub-string to search/filter group members by email.
     *     sort_by: (Optional) Choice- sort results by either: 'member_details', 'status', or 'recent_action'.
     *     show_removed: (Optional) Whether or not to return deleted membership records.
     *     is_reversed: (Optional) Reverse the order in which records are returned.
     *     format_csv: (Optional) Whether or not to return data in a csv format, defaults to `False`
     *     page: (Optional) Which page of Enterprise Group Membership records to request. Leave blank to fetch all
     *         group membership records
     *     learners: (Optional) Array of learner emails. If specified, the endpoint will only return membership
     *         records associated with one of the provided emails.
     */
    get: operations["api_v1_subsidy_access_policies_group_members_retrieve"];
  };
  "/csrf/api/v1/token": {
    /** @description GET /csrf/api/v1/token */
    get: operations["csrf_api_v1_token_retrieve"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @description * `direct` - Direct
     * * `request` - Request
     * * `assigned` - Assigned
     * @enum {string}
     */
    AccessMethodEnum: "direct" | "request" | "assigned";
    /**
     * @description * `learner_linked` - Learner linked to customer
     * * `notified` - Learner notified of assignment
     * * `reminded` - Learner reminded about assignment
     * * `redeemed` - Learner redeemed the assigned content
     * * `cancelled` - Learner assignment cancelled
     * * `cancelled_acknowledged` - Learner assignment cancellation acknowledged by learner
     * * `expired` - Learner assignment expired
     * * `expired_acknowledged` - Learner assignment expiration acknowledged by learner
     * * `reversed` - Transaction for this assignment has been reversed
     * @enum {string}
     */
    ActionType5a0Enum: "learner_linked" | "notified" | "reminded" | "redeemed" | "cancelled" | "cancelled_acknowledged" | "expired" | "expired_acknowledged" | "reversed";
    /** @description Serializer for structuring the admin learner profile response. */
    AdminLearnerProfileResponse: {
      subscriptions?: string;
      group_memberships?: string;
      enrollments?: string;
    };
    /**
     * @description Container serializer to describe created and existing
     * admin emails in a provisioning response.
     */
    AdminObjectResponse: {
      created_admins: components["schemas"]["CreatedCustomerAdminResponse"][];
      existing_admins: components["schemas"]["ExistingCustomerAdminResponse"][];
    };
    /**
     * @description Request Serializer for POST parameters to an API call to acknowledge assignments.
     *
     * For view: AssignmentConfigurationViewSet.acknowledge_assignments
     */
    AssignmentConfigurationAcknowledgeAssignmentsRequest: {
      /** @description List of LearnerContentAssignment UUIDs to acknowledge. */
      assignment_uuids: string[];
    };
    /**
     * @description Response Serializer for POST API call to acknowledge assignments.
     *
     * For view: AssignmentConfigurationViewSet.acknowledge_assignments
     */
    AssignmentConfigurationAcknowledgeAssignmentsResponse: {
      /** @description List of acknowledged LearnerContentAssignment UUIDs. */
      acknowledged_assignments?: string[];
      /** @description List of already acknowledged LearnerContentAssignment UUIDs. */
      already_acknowledged_assignments?: string[];
      /** @description List of unacknowledged LearnerContentAssignment UUIDs. */
      unacknowledged_assignments?: string[];
    };
    /** @description Serializer to validate request data for create() (POST) operations. */
    AssignmentConfigurationCreateRequest: {
      /** Format: uuid */
      uuid: string;
      /**
       * Format: uuid
       * @description The owning Enterprise Customer's UUID. Cannot be blank or null.
       */
      enterprise_customer_uuid?: string;
      /** @description Whether this assignment configuration is active. Defaults to True. */
      active: boolean;
    };
    /** @description A read-only Serializer for responding to requests for ``AssignmentConfiguration`` records. */
    AssignmentConfigurationResponse: {
      /** Format: uuid */
      uuid: string;
      /** @description The Assignment-based access policy related to this assignment configuration, if any. */
      subsidy_access_policy: string;
      /**
       * Format: uuid
       * @description The owning Enterprise Customer's UUID. Cannot be blank or null.
       */
      enterprise_customer_uuid: string;
      /** @description Whether this assignment configuration is active. Defaults to True. */
      active: boolean;
    };
    /**
     * @description Request Serializer for PUT or PATCH requests to update an AssignmentConfiguration.
     *
     * For views: AssignmentConfigurationViewSet.update and AssignmentConfigurationViewSet.partial_update.
     */
    AssignmentConfigurationUpdateRequest: {
      /** @description Whether this assignment configuration is active. Defaults to True. */
      active?: boolean;
    };
    /** @enum {unknown} */
    BlankEnum: "";
    /**
     * @description Serializer to help return additional content metadata for assignments.  These fields should
     * map more or less 1-1 to the fields in content metadata dicts returned from the
     * enterprise-catalog `get_content_metadata` response payload.
     */
    ContentMetadataForAssignment: {
      /**
       * Format: date-time
       * @description The start date of the course
       */
      start_date: string;
      /**
       * Format: date-time
       * @description The end date of the course
       */
      end_date: string;
      /**
       * Format: date-time
       * @description The date by which the learner must accept/enroll
       */
      enroll_by_date: string;
      /** @description The price, in USD, of this content */
      content_price: number;
      /** @description The type of course, something like "executive-education-2u" or "verified-audit" */
      course_type: string | null;
      partners: components["schemas"]["CoursePartner"];
    };
    /**
     * @description * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     * @enum {string}
     */
    CountryEnum: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW";
    /** @description Serializer for the `CouponCodeRequest` model. */
    CouponCodeRequest: {
      /** Format: uuid */
      uuid: string;
      user: number;
      lms_user_id: number;
      /** Format: email */
      email: string;
      course_id: string;
      course_title: string | null;
      course_partners: unknown;
      /** Format: uuid */
      enterprise_customer_uuid: string;
      state: components["schemas"]["State7b6Enum"];
      /** Format: date-time */
      reviewed_at: string | null;
      reviewer_lms_user_id: number | null;
      decline_reason?: string | null;
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      modified: string;
      coupon_id: number | null;
      coupon_code: string | null;
    };
    /** @description Serialized partner ``name`` and ``logo_image_url`` for content_metadata of an assignment. */
    CoursePartner: {
      /** @description The partner name */
      name: string;
      /** @description The URL for the partner logo image */
      logo_image_url: string;
    };
    /** @description Pending admin serializer for provisioning responses. */
    CreatedCustomerAdminResponse: {
      /** Format: email */
      user_email: string;
    };
    /** @description Serializer for customer agreement. */
    CustomerAgreement: {
      /** Format: uuid */
      uuid: string;
      available_subscription_catalogs: string[];
      /** Format: uuid */
      default_enterprise_catalog_uuid: string | null;
      net_days_until_expiration: number;
      disable_expiration_notifications: boolean;
      enable_auto_applied_subscriptions_with_universal_link: boolean;
      /** Format: uuid */
      subscription_for_auto_applied_licenses: string | null;
      /** @default false */
      has_custom_license_expiration_messaging_v2?: boolean | null;
      button_label_in_modal_v2?: string | null;
      expired_subscription_modal_messaging_v2?: string | null;
      modal_header_text_v2?: string | null;
      url_for_button_in_modal_v2?: string | null;
    };
    /** @description Serializer for enrollment due date. */
    EnrollmentDueDate: {
      name: string;
      date: string;
      /** Format: uri */
      url: string;
    };
    /** @description Catalog object serializer for provisioning requests. */
    EnterpriseCatalogRequest: {
      /** @description The name of the Enterprise Catalog. */
      title: string;
      /** @description The id of the related Catalog Query. */
      catalog_query_id: number;
    };
    /** @description Catalog object serializer for provisioning responses. */
    EnterpriseCatalogResponse: {
      /** Format: uuid */
      uuid: string;
      /** Format: uuid */
      enterprise_customer_uuid: string;
      title: string;
      catalog_query_id: number;
    };
    /** @description Serializer for enterprise course enrollment. */
    EnterpriseCourseEnrollment: {
      can_unenroll: boolean;
      course_run_id: string;
      course_run_status: string;
      course_key: string;
      course_type: string;
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      end_date: string | null;
      /** Format: date-time */
      enroll_by: string | null;
      has_emails_enabled: boolean;
      is_enrollment_active: boolean;
      is_revoked: boolean;
      /** Format: uri */
      link_to_course: string;
      /** Format: uri */
      link_to_certificate: string | null;
      micromasters_title: string | null;
      mode: string;
      notifications: components["schemas"]["EnrollmentDueDate"][];
      org_name: string;
      pacing: string;
      product_source: string;
      /** Format: uri */
      resume_course_run_url: string | null;
      /** Format: date-time */
      start_date: string | null;
      title: string;
    };
    /** @description Serializer for enterprise customer. */
    EnterpriseCustomer: {
      /** Format: uuid */
      uuid: string;
      slug: string;
      name: string;
      active: boolean;
      auth_org_id?: string | null;
      site: components["schemas"]["EnterpriseCustomerSite"];
      branding_configuration: components["schemas"]["EnterpriseCustomerBrandingConfiguration"];
      identity_provider?: string | null;
      identity_providers?: components["schemas"]["EnterpriseCustomerIdentityProvider"][];
      enable_data_sharing_consent: boolean;
      enforce_data_sharing_consent: string;
      disable_expiry_messaging_for_learner_credit: boolean;
      enable_audit_enrollment: boolean;
      replace_sensitive_sso_username: boolean;
      enable_portal_code_management_screen: boolean;
      sync_learner_profile_data: boolean;
      enable_audit_data_reporting: boolean;
      enable_learner_portal: boolean;
      enable_learner_portal_offers: boolean;
      enable_portal_learner_credit_management_screen: boolean;
      enable_executive_education_2U_fulfillment: boolean;
      enable_portal_reporting_config_screen: boolean;
      enable_portal_saml_configuration_screen: boolean;
      /** Format: email */
      contact_email?: string | null;
      enable_portal_subscription_management_screen: boolean;
      hide_course_original_price: boolean;
      enable_analytics_screen: boolean;
      enable_integrated_customer_learner_portal_search: boolean;
      enable_generation_of_api_credentials: boolean;
      enable_portal_lms_configurations_screen: boolean;
      sender_alias?: string | null;
      enterprise_customer_catalogs?: string[];
      /** Format: email */
      reply_to?: string | null;
      enterprise_notification_banner?: components["schemas"]["EnterpriseCustomerNotificationBanner"] | null;
      hide_labor_market_data: boolean;
      /** Format: date-time */
      modified: string;
      enable_universal_link: boolean;
      enable_browse_and_request: boolean;
      admin_users?: components["schemas"]["EnterpriseCustomerAdminUser"][];
      enable_learner_portal_sidebar_message: boolean;
      learner_portal_sidebar_content?: string | null;
      enable_pathways: boolean;
      enable_programs: boolean;
      enable_demo_data_for_analytics_and_lpr: boolean;
      enable_academies: boolean;
      enable_one_academy: boolean;
      active_integrations?: components["schemas"]["EnterpriseCustomerActiveIntegration"][];
      show_videos_in_learner_portal_search_results: boolean;
      default_language?: string | null;
      country: string;
      enable_slug_login: boolean;
      disable_search: boolean;
      show_integration_warning: boolean;
    };
    /** @description Serializer for enterprise customer integration. */
    EnterpriseCustomerActiveIntegration: {
      channel_code: string;
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      modified: string;
      display_name: string;
      active: boolean;
    };
    /** @description Serializer for enterprise customer admin user. */
    EnterpriseCustomerAdminUser: {
      /** Format: email */
      email?: string | null;
      lms_user_id: number;
    };
    /** @description Serializer for enterprise customer branding configuration. */
    EnterpriseCustomerBrandingConfiguration: {
      /** Format: uri */
      logo?: string | null;
      primary_color: string;
      secondary_color: string;
      tertiary_color: string;
    };
    /** @description Serializer for enterprise customer identity provider. */
    EnterpriseCustomerIdentityProvider: {
      provider_id: string;
      default_provider: boolean;
    };
    /** @description Serializer for enterprise customer notification banner. */
    EnterpriseCustomerNotificationBanner: {
      title?: string | null;
      text?: string | null;
    };
    /** @description Customer object serializer for provisioning requests. */
    EnterpriseCustomerRequest: {
      /** @description The unique name of the Enterprise Customer. */
      name: string;
      /**
       * @description The two letter ISO 3166-2 ISO code representing the customer country.
       *
       * * `AF` - Afghanistan
       * * `AX` - Åland Islands
       * * `AL` - Albania
       * * `DZ` - Algeria
       * * `AS` - American Samoa
       * * `AD` - Andorra
       * * `AO` - Angola
       * * `AI` - Anguilla
       * * `AQ` - Antarctica
       * * `AG` - Antigua and Barbuda
       * * `AR` - Argentina
       * * `AM` - Armenia
       * * `AW` - Aruba
       * * `AU` - Australia
       * * `AT` - Austria
       * * `AZ` - Azerbaijan
       * * `BS` - Bahamas
       * * `BH` - Bahrain
       * * `BD` - Bangladesh
       * * `BB` - Barbados
       * * `BY` - Belarus
       * * `BE` - Belgium
       * * `BZ` - Belize
       * * `BJ` - Benin
       * * `BM` - Bermuda
       * * `BT` - Bhutan
       * * `BO` - Bolivia
       * * `BQ` - Bonaire, Sint Eustatius and Saba
       * * `BA` - Bosnia and Herzegovina
       * * `BW` - Botswana
       * * `BV` - Bouvet Island
       * * `BR` - Brazil
       * * `IO` - British Indian Ocean Territory
       * * `BN` - Brunei
       * * `BG` - Bulgaria
       * * `BF` - Burkina Faso
       * * `BI` - Burundi
       * * `CV` - Cabo Verde
       * * `KH` - Cambodia
       * * `CM` - Cameroon
       * * `CA` - Canada
       * * `KY` - Cayman Islands
       * * `CF` - Central African Republic
       * * `TD` - Chad
       * * `CL` - Chile
       * * `CN` - China
       * * `CX` - Christmas Island
       * * `CC` - Cocos (Keeling) Islands
       * * `CO` - Colombia
       * * `KM` - Comoros
       * * `CG` - Congo
       * * `CD` - Congo (the Democratic Republic of the)
       * * `CK` - Cook Islands
       * * `CR` - Costa Rica
       * * `CI` - Côte d'Ivoire
       * * `HR` - Croatia
       * * `CU` - Cuba
       * * `CW` - Curaçao
       * * `CY` - Cyprus
       * * `CZ` - Czechia
       * * `DK` - Denmark
       * * `DJ` - Djibouti
       * * `DM` - Dominica
       * * `DO` - Dominican Republic
       * * `EC` - Ecuador
       * * `EG` - Egypt
       * * `SV` - El Salvador
       * * `GQ` - Equatorial Guinea
       * * `ER` - Eritrea
       * * `EE` - Estonia
       * * `SZ` - Eswatini
       * * `ET` - Ethiopia
       * * `FK` - Falkland Islands (Malvinas)
       * * `FO` - Faroe Islands
       * * `FJ` - Fiji
       * * `FI` - Finland
       * * `FR` - France
       * * `GF` - French Guiana
       * * `PF` - French Polynesia
       * * `TF` - French Southern Territories
       * * `GA` - Gabon
       * * `GM` - Gambia
       * * `GE` - Georgia
       * * `DE` - Germany
       * * `GH` - Ghana
       * * `GI` - Gibraltar
       * * `GR` - Greece
       * * `GL` - Greenland
       * * `GD` - Grenada
       * * `GP` - Guadeloupe
       * * `GU` - Guam
       * * `GT` - Guatemala
       * * `GG` - Guernsey
       * * `GN` - Guinea
       * * `GW` - Guinea-Bissau
       * * `GY` - Guyana
       * * `HT` - Haiti
       * * `HM` - Heard Island and McDonald Islands
       * * `VA` - Holy See
       * * `HN` - Honduras
       * * `HK` - Hong Kong
       * * `HU` - Hungary
       * * `IS` - Iceland
       * * `IN` - India
       * * `ID` - Indonesia
       * * `IR` - Iran
       * * `IQ` - Iraq
       * * `IE` - Ireland
       * * `IM` - Isle of Man
       * * `IL` - Israel
       * * `IT` - Italy
       * * `JM` - Jamaica
       * * `JP` - Japan
       * * `JE` - Jersey
       * * `JO` - Jordan
       * * `KZ` - Kazakhstan
       * * `KE` - Kenya
       * * `KI` - Kiribati
       * * `KW` - Kuwait
       * * `KG` - Kyrgyzstan
       * * `LA` - Laos
       * * `LV` - Latvia
       * * `LB` - Lebanon
       * * `LS` - Lesotho
       * * `LR` - Liberia
       * * `LY` - Libya
       * * `LI` - Liechtenstein
       * * `LT` - Lithuania
       * * `LU` - Luxembourg
       * * `MO` - Macao
       * * `MG` - Madagascar
       * * `MW` - Malawi
       * * `MY` - Malaysia
       * * `MV` - Maldives
       * * `ML` - Mali
       * * `MT` - Malta
       * * `MH` - Marshall Islands
       * * `MQ` - Martinique
       * * `MR` - Mauritania
       * * `MU` - Mauritius
       * * `YT` - Mayotte
       * * `MX` - Mexico
       * * `FM` - Micronesia
       * * `MD` - Moldova
       * * `MC` - Monaco
       * * `MN` - Mongolia
       * * `ME` - Montenegro
       * * `MS` - Montserrat
       * * `MA` - Morocco
       * * `MZ` - Mozambique
       * * `MM` - Myanmar
       * * `NA` - Namibia
       * * `NR` - Nauru
       * * `NP` - Nepal
       * * `NL` - Netherlands
       * * `NC` - New Caledonia
       * * `NZ` - New Zealand
       * * `NI` - Nicaragua
       * * `NE` - Niger
       * * `NG` - Nigeria
       * * `NU` - Niue
       * * `NF` - Norfolk Island
       * * `KP` - North Korea
       * * `MK` - North Macedonia
       * * `MP` - Northern Mariana Islands
       * * `NO` - Norway
       * * `OM` - Oman
       * * `PK` - Pakistan
       * * `PW` - Palau
       * * `PS` - Palestine, State of
       * * `PA` - Panama
       * * `PG` - Papua New Guinea
       * * `PY` - Paraguay
       * * `PE` - Peru
       * * `PH` - Philippines
       * * `PN` - Pitcairn
       * * `PL` - Poland
       * * `PT` - Portugal
       * * `PR` - Puerto Rico
       * * `QA` - Qatar
       * * `RE` - Réunion
       * * `RO` - Romania
       * * `RU` - Russia
       * * `RW` - Rwanda
       * * `BL` - Saint Barthélemy
       * * `SH` - Saint Helena, Ascension and Tristan da Cunha
       * * `KN` - Saint Kitts and Nevis
       * * `LC` - Saint Lucia
       * * `MF` - Saint Martin (French part)
       * * `PM` - Saint Pierre and Miquelon
       * * `VC` - Saint Vincent and the Grenadines
       * * `WS` - Samoa
       * * `SM` - San Marino
       * * `ST` - Sao Tome and Principe
       * * `SA` - Saudi Arabia
       * * `SN` - Senegal
       * * `RS` - Serbia
       * * `SC` - Seychelles
       * * `SL` - Sierra Leone
       * * `SG` - Singapore
       * * `SX` - Sint Maarten (Dutch part)
       * * `SK` - Slovakia
       * * `SI` - Slovenia
       * * `SB` - Solomon Islands
       * * `SO` - Somalia
       * * `ZA` - South Africa
       * * `GS` - South Georgia and the South Sandwich Islands
       * * `KR` - South Korea
       * * `SS` - South Sudan
       * * `ES` - Spain
       * * `LK` - Sri Lanka
       * * `SD` - Sudan
       * * `SR` - Suriname
       * * `SJ` - Svalbard and Jan Mayen
       * * `SE` - Sweden
       * * `CH` - Switzerland
       * * `SY` - Syria
       * * `TW` - Taiwan
       * * `TJ` - Tajikistan
       * * `TZ` - Tanzania
       * * `TH` - Thailand
       * * `TL` - Timor-Leste
       * * `TG` - Togo
       * * `TK` - Tokelau
       * * `TO` - Tonga
       * * `TT` - Trinidad and Tobago
       * * `TN` - Tunisia
       * * `TR` - Türkiye
       * * `TM` - Turkmenistan
       * * `TC` - Turks and Caicos Islands
       * * `TV` - Tuvalu
       * * `UG` - Uganda
       * * `UA` - Ukraine
       * * `AE` - United Arab Emirates
       * * `GB` - United Kingdom
       * * `UM` - United States Minor Outlying Islands
       * * `US` - United States of America
       * * `UY` - Uruguay
       * * `UZ` - Uzbekistan
       * * `VU` - Vanuatu
       * * `VE` - Venezuela
       * * `VN` - Vietnam
       * * `VG` - Virgin Islands (British)
       * * `VI` - Virgin Islands (U.S.)
       * * `WF` - Wallis and Futuna
       * * `EH` - Western Sahara
       * * `YE` - Yemen
       * * `ZM` - Zambia
       * * `ZW` - Zimbabwe
       */
      country: components["schemas"]["CountryEnum"];
      /** @description An optional customer slug. One will be generated if not provided. */
      slug?: string;
    };
    /** @description Customer object serializer for provisioning responses. */
    EnterpriseCustomerResponse: {
      /** Format: uuid */
      uuid: string;
      name: string;
      country: components["schemas"]["CountryEnum"];
      slug: string;
    };
    /** @description Serializer for enterprise customer site. */
    EnterpriseCustomerSite: {
      domain: string;
      name: string;
    };
    /** @description Serializer for all linked enterprise customer users */
    EnterpriseCustomerUser: {
      id: number;
      enterprise_customer: components["schemas"]["EnterpriseCustomer"];
      active: boolean;
    };
    /** @description Serializer for enterprise customer user subsidies. */
    EnterpriseCustomerUserSubsidies: {
      subscriptions?: components["schemas"]["Subscriptions"];
    };
    /**
     * @description Base Serializer for BFF messages.
     *
     * Fields:
     *     user_message (str): A user-friendly message.
     *     developer_message (str): A more detailed message for debugging purposes.
     */
    Error: {
      developer_message: string;
      user_message: string;
    };
    /**
     * @description * `email_error` - Email error
     * * `internal_api_error` - Internal API error
     * * `enrollment_error` - Enrollment error
     * @enum {string}
     */
    ErrorReasonEnum: "email_error" | "internal_api_error" | "enrollment_error";
    /** @description Existing admin serializer for provisioning responses. */
    ExistingCustomerAdminResponse: {
      /** Format: email */
      user_email: string;
    };
    /**
     * @description A read-only serializer for responding to requests to the ``get_group_member_data_with_aggregates`` endpoint.
     *
     * For view: SubsidyAccessPolicyGroupViewset.get_group_member_data_with_aggregates
     */
    GroupMemberWithAggregatesResponse: {
      /** @description LMS enterprise user ID associated with the membership. */
      enterprise_customer_user_id: number;
      /** @description LMS auth user ID associated with the membership. */
      lms_user_id: number;
      /** @description LMS pending enterprise user ID associated with the membership. */
      pending_enterprise_customer_user_id: number;
      /**
       * Format: uuid
       * @description The UUID associated with the group membership record.
       */
      enterprise_group_membership_uuid: string;
      /** @description User record associated with the membership details, including name and email. */
      member_details: components["schemas"]["GroupMembersDetails"];
      /** @description String representation of the most recent action associated with the creation of the membership. */
      recent_action: string;
      /** @description String representation of the current membership status. */
      status: string;
      /**
       * Format: date-time
       * @description Datetime at which the membership and user record when from pending to realized.
       */
      activated_at: string;
      /** @description Number of enrollments, made by a group member, that are associated with the subsidy access policyconnected to the group. */
      enrollment_count: number;
    };
    /**
     * @description Sub-serializer for the response objects associated with the ``get_group_member_data_with_aggregates``
     * endpoint. Contains data captured by the ``member_details`` field.
     */
    GroupMembersDetails: {
      /** @description The email associated with the group member user record. */
      user_email: string;
      /** @description The full (first and last) name of the group member user records. Is blank if the member is pending */
      user_name?: string;
    };
    /** @description Serializer for the learner academy detail request. */
    LearnerAcademyRequest: {
      /**
       * Format: uuid
       * @description The UUID of the enterprise customer.
       */
      enterprise_customer_uuid?: string;
      /** @description The slug of the enterprise customer. */
      enterprise_customer_slug?: string;
    };
    /** @description Serializer for the learner academy detail response. */
    LearnerAcademyResponse: {
      enterprise_customer?: components["schemas"]["EnterpriseCustomer"] | null;
      all_linked_enterprise_customer_users?: components["schemas"]["EnterpriseCustomerUser"][];
      active_enterprise_customer?: components["schemas"]["EnterpriseCustomer"] | null;
      staff_enterprise_customer?: components["schemas"]["EnterpriseCustomer"] | null;
      should_update_active_enterprise_customer_user: boolean;
      secured_algolia_api_key?: string | null;
      /** @description Mapping of catalog UUIDs to catalog query UUIDs. */
      catalog_uuids_to_catalog_query_uuids: {
        [key: string]: string;
      };
      errors?: components["schemas"]["Error"][];
      warnings?: components["schemas"]["Warning"][];
      enterprise_features?: {
        [key: string]: unknown;
      };
      enterprise_customer_user_subsidies: components["schemas"]["EnterpriseCustomerUserSubsidies"];
    };
    /** @description A read-only Serializer for responding to requests for ``LearnerContentAssignmentAction`` records. */
    LearnerContentAssignmentAction: {
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      modified: string;
      /** Format: uuid */
      uuid: string;
      /**
       * @description The type of action take on the related assignment record.
       *
       * * `learner_linked` - Learner linked to customer
       * * `notified` - Learner notified of assignment
       * * `reminded` - Learner reminded about assignment
       * * `redeemed` - Learner redeemed the assigned content
       * * `cancelled` - Learner assignment cancelled
       * * `cancelled_acknowledged` - Learner assignment cancellation acknowledged by learner
       * * `expired` - Learner assignment expired
       * * `expired_acknowledged` - Learner assignment expiration acknowledged by learner
       * * `reversed` - Transaction for this assignment has been reversed
       */
      action_type: components["schemas"]["ActionType5a0Enum"];
      /**
       * Format: date-time
       * @description The time at which the action was successfully completed.
       */
      completed_at: string | null;
      /**
       * @description The type of error that occurred during the action, if any.
       *
       * * `email_error` - Email error
       * * `internal_api_error` - Internal API error
       * * `enrollment_error` - Enrollment error
       */
      error_reason: components["schemas"]["ErrorReasonEnum"] | components["schemas"]["NullEnum"] | null;
    };
    /**
     * @description A read-only Serializer for responding to requests for ``LearnerContentAssignmentAction`` records,
     * serialized with an additional field for whether or not the action has been acknowledged by the learner.
     */
    LearnerContentAssignmentActionLearnerAcknowledged: {
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      modified: string;
      /** Format: uuid */
      uuid: string;
      /**
       * @description The type of action take on the related assignment record.
       *
       * * `learner_linked` - Learner linked to customer
       * * `notified` - Learner notified of assignment
       * * `reminded` - Learner reminded about assignment
       * * `redeemed` - Learner redeemed the assigned content
       * * `cancelled` - Learner assignment cancelled
       * * `cancelled_acknowledged` - Learner assignment cancellation acknowledged by learner
       * * `expired` - Learner assignment expired
       * * `expired_acknowledged` - Learner assignment expiration acknowledged by learner
       * * `reversed` - Transaction for this assignment has been reversed
       */
      action_type: components["schemas"]["ActionType5a0Enum"];
      /**
       * Format: date-time
       * @description The time at which the action was successfully completed.
       */
      completed_at: string | null;
      /**
       * @description The type of error that occurred during the action, if any.
       *
       * * `email_error` - Email error
       * * `internal_api_error` - Internal API error
       * * `enrollment_error` - Enrollment error
       */
      error_reason: components["schemas"]["ErrorReasonEnum"] | components["schemas"]["NullEnum"] | null;
      learner_acknowledged: string;
    };
    /**
     * @description Request serializer to validate remind and cancel endpoint query params.
     *
     * For view: LearnerContentAssignmentAdminViewSet.remind and LearnerContentAssignmentAdminViewSet.cancel
     */
    LearnerContentAssignmentActionRequest: {
      assignment_uuids: string[];
    };
    /**
     * @description A read-only Serializer for responding to requests for ``LearnerContentAssignment`` records FOR ADMINS.
     *
     * Important: This serializer depends on extra dynamic fields annotated by calling
     * ``LearnerContentAssignment.annotate_dynamic_fields_onto_queryset()`` on the assignment queryset.
     */
    LearnerContentAssignmentAdminResponse: {
      /** Format: uuid */
      uuid: string;
      /** Format: uuid */
      assignment_configuration: string;
      /**
       * Format: email
       * @description Email of learner to assign content. Automatically scrubbed after 90 days.
       */
      learner_email: string;
      /** @description The id of the Open edX LMS user record with which this LearnerContentAssignment is associated. This may be null at time of creation. */
      lms_user_id: number | null;
      /** @description The globally unique content identifier to assign to the learner.  Joinable with ContentMetadata.content_key in enterprise-catalog. */
      content_key: string;
      /** @description The globally unique content identifier of the parent content to assign to the learner.  Joinable with ContentMetadata.content_key in enterprise-catalog. */
      parent_content_key: string | null;
      /** @description Whether the content_key corresponds to a course run. If True, the content_key should be a course run key. */
      is_assigned_course_run: boolean;
      /** @description The ContentMetadata.title from content corresponding to the content_key */
      content_title: string | null;
      /** @description Cost of the content in USD Cents. */
      content_quantity: number;
      /**
       * @description The current state of the LearnerContentAssignment. One of: ['allocated', 'accepted', 'cancelled', 'errored', 'expired', 'reversed']
       *
       * * `allocated` - Allocated
       * * `accepted` - Accepted
       * * `cancelled` - Cancelled
       * * `errored` - Errored
       * * `expired` - Expired
       * * `reversed` - Reversed
       */
      state: components["schemas"]["StateBedEnum"];
      /**
       * Format: uuid
       * @description A reference to the ledger transaction associated with the subsidy supporting this assignment.  Likely null if state != accepted.
       */
      transaction_uuid: string | null;
      /** @description All actions associated with this assignment. */
      actions: components["schemas"]["LearnerContentAssignmentAction"][];
      /** @description The earliest possible expiration date for this assignment. */
      earliest_possible_expiration: components["schemas"]["LearnerContentAssignmentEarliestExpiration"];
      /** @description Structured data about the most recent action. Meant to power a frontend table column. */
      recent_action: components["schemas"]["LearnerContentAssignmentRecentAction"];
      /**
       * @description learner_state is an admin-facing dynamic state, not to be confused with `state`. Meant to power a frontend table column.
       *
       * * `notifying` - Sending assignment notification message to learner.
       * * `waiting` - Waiting on learner to accept assignment.
       * * `failed` - Assignment unexpectedly failed creation or acceptance.
       * * `expired` - Assignment expired due to 90-day timeout, subsidy expiration, or content enrollment deadline.
       */
      learner_state: components["schemas"]["LearnerStateEnum"];
      /** @description Structured data about the most recent error reason. Meant to power a frontend table column. */
      error_reason: string;
    };
    /**
     * @description Structured data about the earliest possible expiration associated with this assignment, returning
     * the expiration date and the expiration reason.
     */
    LearnerContentAssignmentEarliestExpiration: {
      /**
       * Format: date-time
       * @description The earliest possible expiration date for this assignment.
       */
      date: string;
      /** @description The reason for the earliest possible expiration date for this assignment. */
      reason: string;
    };
    /**
     * @description Response serializer for nudge endpoint 422 errors.
     *
     * For view: LearnerContentAssignmentAdminViewSet.nudge
     */
    LearnerContentAssignmentNudgeHTTP422Error: {
      error_message: string;
    };
    /**
     * @description Request serializer to validate nudge endpoint query params.
     *
     * For view: LearnerContentAssignmentAdminViewSet.nudge
     */
    LearnerContentAssignmentNudgeRequest: {
      /** @description A list of executive education assignment uuids associated with an assignment configuration */
      assignment_uuids: string[];
      /** @description The number days ahead of a course start_date we want to send a nudge email for */
      days_before_course_start_date: number;
    };
    /**
     * @description Response serializer for nudge endpoint.
     *
     * For view: LearnerContentAssignmentAdminViewSet.nudge
     */
    LearnerContentAssignmentNudgeResponse: {
      /** @description A list of uuids that have been sent to the celery task to nudge */
      nudged_assignment_uuids: string[];
      /** @description A list of uuids that have not been sent to the celery task to nudge */
      unnudged_assignment_uuids: string[];
    };
    /** @description Structured data about the most recent action, meant to power a frontend table column. */
    LearnerContentAssignmentRecentAction: {
      /**
       * @description Type of the recent action.
       *
       * * `assigned` - Learner assigned content.
       * * `reminded` - Learner sent reminder message.
       */
      action_type: components["schemas"]["LearnerContentAssignmentRecentActionActionTypeEnum"];
      /**
       * Format: date-time
       * @description Date and time when the action was taken.
       */
      timestamp: string;
    };
    /**
     * @description * `assigned` - Learner assigned content.
     * * `reminded` - Learner sent reminder message.
     * @enum {string}
     */
    LearnerContentAssignmentRecentActionActionTypeEnum: "assigned" | "reminded";
    /** @description A read-only Serializer for responding to requests for ``LearnerContentAssignment`` records. */
    LearnerContentAssignmentResponse: {
      /** Format: uuid */
      uuid: string;
      /** Format: uuid */
      assignment_configuration: string;
      /**
       * Format: email
       * @description Email of learner to assign content. Automatically scrubbed after 90 days.
       */
      learner_email: string;
      /** @description The id of the Open edX LMS user record with which this LearnerContentAssignment is associated. This may be null at time of creation. */
      lms_user_id: number | null;
      /** @description The globally unique content identifier to assign to the learner.  Joinable with ContentMetadata.content_key in enterprise-catalog. */
      content_key: string;
      /** @description The globally unique content identifier of the parent content to assign to the learner.  Joinable with ContentMetadata.content_key in enterprise-catalog. */
      parent_content_key: string | null;
      /** @description Whether the content_key corresponds to a course run. If True, the content_key should be a course run key. */
      is_assigned_course_run: boolean;
      /** @description The ContentMetadata.title from content corresponding to the content_key */
      content_title: string | null;
      /** @description Cost of the content in USD Cents. */
      content_quantity: number;
      /**
       * @description The current state of the LearnerContentAssignment. One of: ['allocated', 'accepted', 'cancelled', 'errored', 'expired', 'reversed']
       *
       * * `allocated` - Allocated
       * * `accepted` - Accepted
       * * `cancelled` - Cancelled
       * * `errored` - Errored
       * * `expired` - Expired
       * * `reversed` - Reversed
       */
      state: components["schemas"]["StateBedEnum"];
      /**
       * Format: uuid
       * @description A reference to the ledger transaction associated with the subsidy supporting this assignment.  Likely null if state != accepted.
       */
      transaction_uuid: string | null;
      /** @description All actions associated with this assignment. */
      actions: components["schemas"]["LearnerContentAssignmentAction"][];
      /** @description The earliest possible expiration date for this assignment. */
      earliest_possible_expiration: components["schemas"]["LearnerContentAssignmentEarliestExpiration"];
    };
    /**
     * @description Read-only serializer for LearnerContentAssignment records that also includes whether or not the learner has
     * acknowledged the assignment.
     */
    LearnerContentAssignmentWithLearnerAcknowledgedResponse: {
      /** Format: uuid */
      uuid: string;
      /** Format: uuid */
      assignment_configuration: string;
      /**
       * Format: email
       * @description Email of learner to assign content. Automatically scrubbed after 90 days.
       */
      learner_email: string;
      /** @description The id of the Open edX LMS user record with which this LearnerContentAssignment is associated. This may be null at time of creation. */
      lms_user_id: number | null;
      /** @description The globally unique content identifier to assign to the learner.  Joinable with ContentMetadata.content_key in enterprise-catalog. */
      content_key: string;
      /** @description The globally unique content identifier of the parent content to assign to the learner.  Joinable with ContentMetadata.content_key in enterprise-catalog. */
      parent_content_key: string | null;
      /** @description Whether the content_key corresponds to a course run. If True, the content_key should be a course run key. */
      is_assigned_course_run: boolean;
      /** @description The ContentMetadata.title from content corresponding to the content_key */
      content_title: string | null;
      /** @description Cost of the content in USD Cents. */
      content_quantity: number;
      /**
       * @description The current state of the LearnerContentAssignment. One of: ['allocated', 'accepted', 'cancelled', 'errored', 'expired', 'reversed']
       *
       * * `allocated` - Allocated
       * * `accepted` - Accepted
       * * `cancelled` - Cancelled
       * * `errored` - Errored
       * * `expired` - Expired
       * * `reversed` - Reversed
       */
      state: components["schemas"]["StateBedEnum"];
      /**
       * Format: uuid
       * @description A reference to the ledger transaction associated with the subsidy supporting this assignment.  Likely null if state != accepted.
       */
      transaction_uuid: string | null;
      /** @description All actions associated with this assignment. */
      actions: components["schemas"]["LearnerContentAssignmentActionLearnerAcknowledged"][];
      /** @description The earliest possible expiration date for this assignment. */
      earliest_possible_expiration: components["schemas"]["LearnerContentAssignmentEarliestExpiration"];
      /** @description Additional content metadata fetched from the catalog service or cache. */
      content_metadata: components["schemas"]["ContentMetadataForAssignment"];
      learner_acknowledged: string;
    };
    /** @description Serializer for the learner dashboard request. */
    LearnerDashboardRequest: {
      /**
       * Format: uuid
       * @description The UUID of the enterprise customer.
       */
      enterprise_customer_uuid?: string;
      /** @description The slug of the enterprise customer. */
      enterprise_customer_slug?: string;
    };
    /** @description Serializer for the learner dashboard response. */
    LearnerDashboardResponse: {
      enterprise_customer?: components["schemas"]["EnterpriseCustomer"] | null;
      all_linked_enterprise_customer_users?: components["schemas"]["EnterpriseCustomerUser"][];
      active_enterprise_customer?: components["schemas"]["EnterpriseCustomer"] | null;
      staff_enterprise_customer?: components["schemas"]["EnterpriseCustomer"] | null;
      should_update_active_enterprise_customer_user: boolean;
      secured_algolia_api_key?: string | null;
      /** @description Mapping of catalog UUIDs to catalog query UUIDs. */
      catalog_uuids_to_catalog_query_uuids: {
        [key: string]: string;
      };
      errors?: components["schemas"]["Error"][];
      warnings?: components["schemas"]["Warning"][];
      enterprise_features?: {
        [key: string]: unknown;
      };
      enterprise_customer_user_subsidies: components["schemas"]["EnterpriseCustomerUserSubsidies"];
      enterprise_course_enrollments: components["schemas"]["EnterpriseCourseEnrollment"][];
      all_enrollments_by_status: components["schemas"]["LearnerEnrollmentsByStatus"];
    };
    /** @description Serializer for subscription license status. */
    LearnerEnrollmentsByStatus: {
      in_progress?: components["schemas"]["EnterpriseCourseEnrollment"][];
      upcoming?: components["schemas"]["EnterpriseCourseEnrollment"][];
      completed?: components["schemas"]["EnterpriseCourseEnrollment"][];
      saved_for_later?: components["schemas"]["EnterpriseCourseEnrollment"][];
    };
    /** @description Serializer for the learner search request. */
    LearnerSearchRequest: {
      /**
       * Format: uuid
       * @description The UUID of the enterprise customer.
       */
      enterprise_customer_uuid?: string;
      /** @description The slug of the enterprise customer. */
      enterprise_customer_slug?: string;
    };
    /** @description Serializer for the learner search response. */
    LearnerSearchResponse: {
      enterprise_customer?: components["schemas"]["EnterpriseCustomer"] | null;
      all_linked_enterprise_customer_users?: components["schemas"]["EnterpriseCustomerUser"][];
      active_enterprise_customer?: components["schemas"]["EnterpriseCustomer"] | null;
      staff_enterprise_customer?: components["schemas"]["EnterpriseCustomer"] | null;
      should_update_active_enterprise_customer_user: boolean;
      secured_algolia_api_key?: string | null;
      /** @description Mapping of catalog UUIDs to catalog query UUIDs. */
      catalog_uuids_to_catalog_query_uuids: {
        [key: string]: string;
      };
      errors?: components["schemas"]["Error"][];
      warnings?: components["schemas"]["Warning"][];
      enterprise_features?: {
        [key: string]: unknown;
      };
      enterprise_customer_user_subsidies: components["schemas"]["EnterpriseCustomerUserSubsidies"];
    };
    /** @description Serializer for the learner skills quiz request. */
    LearnerSkillsQuizRequest: {
      /**
       * Format: uuid
       * @description The UUID of the enterprise customer.
       */
      enterprise_customer_uuid?: string;
      /** @description The slug of the enterprise customer. */
      enterprise_customer_slug?: string;
    };
    /** @description Serializer for the learner skills quiz response. */
    LearnerSkillsQuizResponse: {
      enterprise_customer?: components["schemas"]["EnterpriseCustomer"] | null;
      all_linked_enterprise_customer_users?: components["schemas"]["EnterpriseCustomerUser"][];
      active_enterprise_customer?: components["schemas"]["EnterpriseCustomer"] | null;
      staff_enterprise_customer?: components["schemas"]["EnterpriseCustomer"] | null;
      should_update_active_enterprise_customer_user: boolean;
      secured_algolia_api_key?: string | null;
      /** @description Mapping of catalog UUIDs to catalog query UUIDs. */
      catalog_uuids_to_catalog_query_uuids: {
        [key: string]: string;
      };
      errors?: components["schemas"]["Error"][];
      warnings?: components["schemas"]["Warning"][];
      enterprise_features?: {
        [key: string]: unknown;
      };
      enterprise_customer_user_subsidies: components["schemas"]["EnterpriseCustomerUserSubsidies"];
    };
    /**
     * @description * `notifying` - Sending assignment notification message to learner.
     * * `waiting` - Waiting on learner to accept assignment.
     * * `failed` - Assignment unexpectedly failed creation or acceptance.
     * * `expired` - Assignment expired due to 90-day timeout, subsidy expiration, or content enrollment deadline.
     * @enum {string}
     */
    LearnerStateEnum: "notifying" | "waiting" | "failed" | "expired";
    /** @description Serializer for the `LicenseRequest` model. */
    LicenseRequest: {
      /** Format: uuid */
      uuid: string;
      user: number;
      lms_user_id: number;
      /** Format: email */
      email: string;
      course_id?: string | null;
      course_title: string | null;
      course_partners: unknown;
      /** Format: uuid */
      enterprise_customer_uuid: string;
      state: components["schemas"]["State7b6Enum"];
      /** Format: date-time */
      reviewed_at: string | null;
      reviewer_lms_user_id: number | null;
      decline_reason?: string | null;
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      modified: string;
      /** Format: uuid */
      subscription_plan_uuid: string | null;
      /** Format: uuid */
      license_uuid: string | null;
    };
    /** @description Response serializer representing a couple different representations of list (content) prices. */
    ListPriceResponse: {
      /**
       * Format: double
       * @description List price for content, in USD.
       */
      usd: number;
      /** @description List price for content, in USD cents. */
      usd_cents: number;
    };
    /** @enum {unknown} */
    NullEnum: "";
    PaginatedAssignmentConfigurationResponseList: {
      /**
       * @description The total number of items across all pages
       * @example 123
       */
      count?: number;
      /**
       * @description The total number of pages
       * @example 3
       */
      page_count?: number;
      /**
       * @description The number of items per page
       * @example 50
       */
      page_size?: number;
      /**
       * @description The current page number
       * @example 1
       */
      current_page?: number;
      /**
       * Format: uri
       * @description Link to the next page of results
       */
      next?: string | null;
      /**
       * Format: uri
       * @description Link to the previous page of results
       */
      previous?: string | null;
      results?: components["schemas"]["AssignmentConfigurationResponse"][];
    };
    PaginatedCouponCodeRequestList: {
      /**
       * @description The total number of items across all pages
       * @example 123
       */
      count?: number;
      /**
       * @description The total number of pages
       * @example 3
       */
      page_count?: number;
      /**
       * @description The number of items per page
       * @example 50
       */
      page_size?: number;
      /**
       * @description The current page number
       * @example 1
       */
      current_page?: number;
      /**
       * Format: uri
       * @description Link to the next page of results
       */
      next?: string | null;
      /**
       * Format: uri
       * @description Link to the previous page of results
       */
      previous?: string | null;
      results?: components["schemas"]["CouponCodeRequest"][];
    };
    PaginatedLearnerContentAssignmentAdminResponseList: {
      /**
       * @description The total number of items across all pages
       * @example 123
       */
      count?: number;
      /**
       * @description The total number of pages
       * @example 3
       */
      page_count?: number;
      /**
       * @description The number of items per page
       * @example 50
       */
      page_size?: number;
      /**
       * @description The current page number
       * @example 1
       */
      current_page?: number;
      /**
       * Format: uri
       * @description Link to the next page of results
       */
      next?: string | null;
      /**
       * Format: uri
       * @description Link to the previous page of results
       */
      previous?: string | null;
      results?: components["schemas"]["LearnerContentAssignmentAdminResponse"][];
      learner_state_counts?: {
          /**
           * @description The learner state for the assignment
           * @example waiting
           */
          learner_state?: string;
          /**
           * @description The number of assignments in this state
           * @example 123
           */
          count?: number;
        }[];
    };
    PaginatedLearnerContentAssignmentResponseList: {
      /**
       * @description The total number of items across all pages
       * @example 123
       */
      count?: number;
      /**
       * @description The total number of pages
       * @example 3
       */
      page_count?: number;
      /**
       * @description The number of items per page
       * @example 50
       */
      page_size?: number;
      /**
       * @description The current page number
       * @example 1
       */
      current_page?: number;
      /**
       * Format: uri
       * @description Link to the next page of results
       */
      next?: string | null;
      /**
       * Format: uri
       * @description Link to the previous page of results
       */
      previous?: string | null;
      results?: components["schemas"]["LearnerContentAssignmentResponse"][];
    };
    PaginatedLicenseRequestList: {
      /**
       * @description The total number of items across all pages
       * @example 123
       */
      count?: number;
      /**
       * @description The total number of pages
       * @example 3
       */
      page_count?: number;
      /**
       * @description The number of items per page
       * @example 50
       */
      page_size?: number;
      /**
       * @description The current page number
       * @example 1
       */
      current_page?: number;
      /**
       * Format: uri
       * @description Link to the next page of results
       */
      next?: string | null;
      /**
       * Format: uri
       * @description Link to the previous page of results
       */
      previous?: string | null;
      results?: components["schemas"]["LicenseRequest"][];
    };
    PaginatedSubsidyAccessPolicyCreditsAvailableResponseList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["SubsidyAccessPolicyCreditsAvailableResponse"][];
    };
    PaginatedSubsidyAccessPolicyResponseList: {
      /**
       * @description The total number of items across all pages
       * @example 123
       */
      count?: number;
      /**
       * @description The total number of pages
       * @example 3
       */
      page_count?: number;
      /**
       * @description The number of items per page
       * @example 50
       */
      page_size?: number;
      /**
       * @description The current page number
       * @example 1
       */
      current_page?: number;
      /**
       * Format: uri
       * @description Link to the next page of results
       */
      next?: string | null;
      /**
       * Format: uri
       * @description Link to the previous page of results
       */
      previous?: string | null;
      results?: components["schemas"]["SubsidyAccessPolicyResponse"][];
    };
    PaginatedSubsidyRequestCustomerConfigurationList: {
      /**
       * @description The total number of items across all pages
       * @example 123
       */
      count?: number;
      /**
       * @description The total number of pages
       * @example 3
       */
      page_count?: number;
      /**
       * @description The number of items per page
       * @example 50
       */
      page_size?: number;
      /**
       * @description The current page number
       * @example 1
       */
      current_page?: number;
      /**
       * Format: uri
       * @description Link to the next page of results
       */
      next?: string | null;
      /**
       * Format: uri
       * @description Link to the previous page of results
       */
      previous?: string | null;
      results?: components["schemas"]["SubsidyRequestCustomerConfiguration"][];
    };
    /**
     * @description Request Serializer for PUT or PATCH requests to update an AssignmentConfiguration.
     *
     * For views: AssignmentConfigurationViewSet.update and AssignmentConfigurationViewSet.partial_update.
     */
    PatchedAssignmentConfigurationUpdateRequest: {
      /** @description Whether this assignment configuration is active. Defaults to True. */
      active?: boolean;
    };
    /**
     * @description Request Serializer for PUT or PATCH requests to update a subsidy access policy.
     *
     * For views: SubsidyAccessPolicyViewSet.update and SubsidyAccessPolicyViewSet.partial_update.
     */
    PatchedSubsidyAccessPolicyUpdateRequest: {
      /** @description User-facing display name for this policy record */
      display_name?: string | null;
      /** @description Brief description about a specific policy. */
      description?: string;
      /** @description Set to FALSE to deactivate and hide this policy. Use this when you want to disable redemption and make it disappear from all frontends, effectively soft-deleting it. Default is False (deactivated). */
      active?: boolean;
      /** @description True means redeemability of content using this policy has been enabled. Set this to False to deactivate the policy but keep it visible from an admin's perspective (useful when you want to just expire a policy without expiring the whole plan). */
      retired?: boolean | null;
      /**
       * Format: date-time
       * @description The date and time when this policy is considered retired.
       */
      retired_at?: string | null;
      /**
       * Format: uuid
       * @description The primary identifier of the catalog associated with this policy.
       */
      catalog_uuid?: string;
      /**
       * Format: uuid
       * @description The primary identifier of the subsidy associated with this policy.
       */
      subsidy_uuid?: string;
      /**
       * @description The mechanism by which learners access content in this policy, defaults to "direct".
       *
       * * `direct` - Direct
       * * `request` - Request
       * * `assigned` - Assigned
       */
      access_method?: components["schemas"]["AccessMethodEnum"];
      /**
       * Policy-wide spend limit (USD cents)
       * @description The maximum number of allowed dollars to be spent, in aggregate, by all learners under this policy. Denoted in USD cents. Defaults to null, which means that no such maximum exists.
       */
      spend_limit?: number | null;
      /**
       * Per-learner spend limit (USD cents)
       * @description The maximum amount of allowed money spent for a single learner under this policy. Denoted in USD cents. Null value means no limit is set, which disables this feature. Required if policy_type = "PerLearnerSpendCreditAccessPolicy".
       */
      per_learner_spend_limit?: number | null;
      /** @description The maximum number of enrollments allowed for a single learner under this policy. Null value means no limit is set, which disables this feature. Required if policy_type = "PerLearnerEnrollmentCreditAccessPolicy". */
      per_learner_enrollment_limit?: number | null;
      subsidy_active_datetime?: string | null;
      subsidy_expiration_datetime?: string | null;
      is_subsidy_active?: string | null;
      /**
       * Format: date-time
       * @description Before this date, "late redemptions" will be allowed. If empty, late redemptions are disallowed.
       */
      late_redemption_allowed_until?: string | null;
    };
    /** @description Serializer for the `SubsidyRequestCustomerConfiguration` model. */
    PatchedSubsidyRequestCustomerConfiguration: {
      /** Format: uuid */
      enterprise_customer_uuid?: string;
      /** @description Whether or not subsidy requests are enabled for an enterprise. */
      subsidy_requests_enabled?: boolean;
      /**
       * @description Which type of subsidy is used to grant access.
       *
       * * `license` - License Subsidy
       * * `coupon` - Coupon Subsidy
       */
      subsidy_type?: components["schemas"]["SubsidyTypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"] | null;
      changed_by_lms_user_id?: number | null;
    };
    /** @description Pending admin serializer for provisioning requests. */
    PendingCustomerAdminRequest: {
      /**
       * Format: email
       * @description The email address of the requested admin.
       */
      user_email: string;
    };
    /**
     * @description * `PerLearnerEnrollmentCreditAccessPolicy` - PerLearnerEnrollmentCreditAccessPolicy
     * * `PerLearnerSpendCreditAccessPolicy` - PerLearnerSpendCreditAccessPolicy
     * * `AssignedLearnerCreditAccessPolicy` - AssignedLearnerCreditAccessPolicy
     * @enum {string}
     */
    PolicyTypeEnum: "PerLearnerEnrollmentCreditAccessPolicy" | "PerLearnerSpendCreditAccessPolicy" | "AssignedLearnerCreditAccessPolicy";
    /** @description Request serializer for provisioning create view. */
    ProvisioningRequest: {
      /** @description Object describing the requested Enterprise Customer. */
      enterprise_customer: components["schemas"]["EnterpriseCustomerRequest"];
      /** @description List of objects containing requested customer admin email addresses. */
      pending_admins: components["schemas"]["PendingCustomerAdminRequest"][];
      /** @description Object describing the requested Enterprise Catalog. */
      enterprise_catalog: components["schemas"]["EnterpriseCatalogRequest"];
    };
    /** @description Response serializer for provisioning create view. */
    ProvisioningResponse: {
      enterprise_customer: components["schemas"]["EnterpriseCustomerResponse"];
      customer_admins: components["schemas"]["AdminObjectResponse"];
      enterprise_catalog: components["schemas"]["EnterpriseCatalogResponse"];
    };
    /**
     * @description * `requested` - Requested
     * * `pending` - Pending
     * * `approved` - Approved
     * * `declined` - Declined
     * * `error` - Error
     * * `accepted` - Accepted
     * * `cancelled` - Cancelled
     * * `expired` - Expired
     * * `reversed` - Reversed
     * @enum {string}
     */
    State7b6Enum: "requested" | "pending" | "approved" | "declined" | "error" | "accepted" | "cancelled" | "expired" | "reversed";
    /**
     * @description * `allocated` - Allocated
     * * `accepted` - Accepted
     * * `cancelled` - Cancelled
     * * `errored` - Errored
     * * `expired` - Expired
     * * `reversed` - Reversed
     * @enum {string}
     */
    StateBedEnum: "allocated" | "accepted" | "cancelled" | "errored" | "expired" | "reversed";
    /** @description Serializer for subscription license. */
    SubscriptionLicense: {
      /** Format: uuid */
      uuid: string;
      status: string;
      /** Format: email */
      user_email: string | null;
      /** Format: date-time */
      activation_date: string | null;
      /** Format: date-time */
      last_remind_date: string | null;
      /** Format: date-time */
      revoked_date: string | null;
      activation_key: string | null;
      subscription_plan: components["schemas"]["SubscriptionPlan"];
    };
    /** @description Serializer for subscription license status. */
    SubscriptionLicenseStatus: {
      activated?: components["schemas"]["SubscriptionLicense"][];
      assigned?: components["schemas"]["SubscriptionLicense"][];
      revoked?: components["schemas"]["SubscriptionLicense"][];
    };
    /** @description Serializer for subscription plan. */
    SubscriptionPlan: {
      /** Format: uuid */
      uuid: string;
      title: string;
      /** Format: uuid */
      enterprise_catalog_uuid: string;
      is_active: boolean;
      is_current: boolean;
      /** Format: date-time */
      start_date: string;
      /** Format: date-time */
      expiration_date: string;
      days_until_expiration: number;
      days_until_expiration_including_renewals: number;
      should_auto_apply_licenses: boolean | null;
    };
    /** @description Serializer for subscriptions subsidies. */
    Subscriptions: {
      customer_agreement?: components["schemas"]["CustomerAgreement"] | null;
      subscription_licenses?: components["schemas"]["SubscriptionLicense"][];
      subscription_licenses_by_status?: components["schemas"]["SubscriptionLicenseStatus"];
      subscription_license?: components["schemas"]["SubscriptionLicense"] | null;
      subscription_plan?: components["schemas"]["SubscriptionPlan"] | null;
      /** @default false */
      show_expiration_notifications?: boolean;
    };
    /** @description Response serializer representing aggregates about the policy and related objects. */
    SubsidyAccessPolicyAggregates: {
      /** @description Total Amount redeemed for policy, in positive USD cents. */
      amount_redeemed_usd_cents: number;
      /**
       * Format: double
       * @description Total Amount redeemed for policy, in USD.
       */
      amount_redeemed_usd: number;
      /** @description Total amount allocated for policies of type AssignedLearnerCreditAccessPolicy (0 otherwise), in positive USD cents. */
      amount_allocated_usd_cents: number;
      /**
       * Format: double
       * @description ('Total amount allocated for policies of type AssignedLearnerCreditAccessPolicy (0 otherwise), in USD.',)
       */
      amount_allocated_usd: number;
      /** @description Total Amount of available spend for policy, in positive USD cents. */
      spend_available_usd_cents: number;
      /**
       * Format: double
       * @description Total Amount of available spend for policy, in USD.
       */
      spend_available_usd: number;
    };
    /** @description A read-only serializer for responding to request to allocate ``LearnerCotentAssignment`` records. */
    SubsidyAccessPolicyAllocationResponse: {
      /** @description Assignment records whose state was transitioned to "allocated" as a result of this action. */
      updated: components["schemas"]["LearnerContentAssignmentResponse"][];
      /** @description New Assignment records that were created as a result of this action. */
      created: components["schemas"]["LearnerContentAssignmentResponse"][];
      /** @description Already-allocated Assignment records related to the requested policy, learner email(s), and content for this action. */
      no_change: components["schemas"]["LearnerContentAssignmentResponse"][];
    };
    /** @description Serializer to validate policy data for CRUD operations. */
    SubsidyAccessPolicyCRUD: {
      /**
       * Format: uuid
       * @description The uuid that uniquely identifies this policy record.
       */
      uuid: string;
      policy_type: components["schemas"]["PolicyTypeEnum"];
      /** @description User-facing display name for this policy record */
      display_name?: string | null;
      /** @description Brief description about a specific policy. */
      description?: string;
      /** @description Set to FALSE to deactivate and hide this policy. Use this when you want to disable redemption and make it disappear from all frontends, effectively soft-deleting it. Default is False (deactivated). */
      active?: boolean;
      /** @description True means redeemability of content using this policy has been enabled. Set this to False to deactivate the policy but keep it visible from an admin's perspective (useful when you want to just expire a policy without expiring the whole plan). */
      retired?: boolean;
      /**
       * Format: date-time
       * @description The date and time when this policy is considered retired.
       */
      retired_at?: string | null;
      /**
       * Format: uuid
       * @description The owning Enterprise Customer's UUID.  Cannot be blank or null.
       */
      enterprise_customer_uuid: string;
      /**
       * Format: uuid
       * @description The primary identifier of the catalog associated with this policy.
       */
      catalog_uuid: string;
      /**
       * Format: uuid
       * @description The primary identifier of the subsidy associated with this policy.
       */
      subsidy_uuid: string;
      /**
       * @description The mechanism by which learners access content in this policy, defaults to "direct".
       *
       * * `direct` - Direct
       * * `request` - Request
       * * `assigned` - Assigned
       */
      access_method: components["schemas"]["AccessMethodEnum"];
      /** @description The maximum number of enrollments allowed for a single learner under this policy. Null value means no limit is set, which disables this feature. Required if policy_type = "PerLearnerEnrollmentCreditAccessPolicy". */
      per_learner_enrollment_limit?: number | null;
      /**
       * Per-learner spend limit (USD cents)
       * @description The maximum amount of allowed money spent for a single learner under this policy. Denoted in USD cents. Null value means no limit is set, which disables this feature. Required if policy_type = "PerLearnerSpendCreditAccessPolicy".
       */
      per_learner_spend_limit?: number | null;
      /**
       * Policy-wide spend limit (USD cents)
       * @description The maximum number of allowed dollars to be spent, in aggregate, by all learners under this policy. Denoted in USD cents. Defaults to null, which means that no such maximum exists.
       */
      spend_limit?: number | null;
      subsidy_active_datetime: string | null;
      subsidy_expiration_datetime: string | null;
      is_subsidy_active: string | null;
      group_associations: string;
      /**
       * Format: date-time
       * @description Before this date, "late redemptions" will be allowed. If empty, late redemptions are disallowed.
       */
      late_redemption_allowed_until?: string | null;
      is_late_redemption_allowed: string;
    };
    /** @description Response serializer representing a single element of the response list for the can_redeem endpoint. */
    SubsidyAccessPolicyCanRedeemElementResponse: {
      /** @description Requested content_key to which the rest of this element pertains. */
      content_key: string;
      /** @description List price for content. */
      list_price: components["schemas"]["ListPriceResponse"];
      /** @description List of redemptions of this content_key by the requested lms_user_id. */
      redemptions: {
          [key: string]: unknown;
        }[];
      /** @description True if there are any committed redemptions of this content_key by the requested lms_user_id. */
      has_successful_redemption: boolean;
      /** @description One subsidy access policy selected from potentially multiple redeemable policies for the requested content_key and lms_user_id. */
      redeemable_subsidy_access_policy: components["schemas"]["SubsidyAccessPolicyRedeemableResponse"];
      /** @description True if there is a redeemable subsidy access policy for the requested content_key and lms_user_id. */
      can_redeem: boolean;
      /** @description List of reasons why each of the enterprise's subsidy access policies are not redeemable, grouped by reason */
      reasons: components["schemas"]["SubsidyAccessPolicyCanRedeemReasonResponse"][];
    };
    /**
     * @description Response serializer used to document the structure of a "reason" a content key is not redeemable, used by the
     * can_redeem endpoint.
     */
    SubsidyAccessPolicyCanRedeemReasonResponse: {
      /** @description reason code (in camel_case) for why the following subsidy access policies are not redeemable. */
      reason: string;
      /** @description Description of why the following subsidy access policies are not redeemable. */
      user_message: string;
      policy_uuids: string[];
      /** @description context information about the failure reason. */
      metadata: {
        [key: string]: unknown;
      };
    };
    /**
     * @description Response serializer to represent redeemable policies with additional information about remaining balance.
     *
     * For view: SubsidyAccessPolicyRedeemViewset.credits_available
     */
    SubsidyAccessPolicyCreditsAvailableResponse: {
      /**
       * Format: uuid
       * @description The uuid that uniquely identifies this policy record.
       */
      uuid: string;
      policy_redemption_url: string;
      /** @description True if late redemption is currently allowed (i.e. late_redemption_allowed_until is in the future). */
      is_late_redemption_allowed: boolean;
      /** @description Remaining balance for the requesting user, in USD cents. */
      remaining_balance_per_user: number;
      /** @description Remaining balance on the entire subsidy, in USD cents. */
      remaining_balance: number;
      /**
       * Format: date-time
       * @description The date at which the related Subsidy record expires.
       */
      subsidy_expiration_date: string;
      learner_content_assignments: readonly components["schemas"]["LearnerContentAssignmentWithLearnerAcknowledgedResponse"][];
      group_associations: string;
      /** @description The type of this policy (e.g. the name of an access policy proxy model). */
      policy_type: string;
      /**
       * Format: uuid
       * @description The owning Enterprise Customer's UUID.  Cannot be blank or null.
       */
      enterprise_customer_uuid?: string;
      /** @description User-facing display name for this policy record */
      display_name?: string | null;
      /** @description Brief description about a specific policy. */
      description?: string;
      /**
       * @description Set to FALSE to deactivate and hide this policy. Use this when you want to disable redemption and make it disappear from all frontends, effectively soft-deleting it. Default is False (deactivated).
       * @default false
       */
      active?: boolean;
      /** @description True means redeemability of content using this policy has been enabled. Set this to False to deactivate the policy but keep it visible from an admin's perspective (useful when you want to just expire a policy without expiring the whole plan). */
      retired?: boolean;
      /**
       * Format: date-time
       * @description The date and time when this policy is considered retired.
       */
      retired_at?: string | null;
      /**
       * Format: uuid
       * @description The primary identifier of the catalog associated with this policy.
       */
      catalog_uuid: string;
      /**
       * Format: uuid
       * @description The primary identifier of the subsidy associated with this policy.
       */
      subsidy_uuid: string;
      /**
       * @description The mechanism by which learners access content in this policy, defaults to "direct".
       *
       * * `direct` - Direct
       * * `request` - Request
       * * `assigned` - Assigned
       */
      access_method?: components["schemas"]["AccessMethodEnum"];
      /**
       * Policy-wide spend limit (USD cents)
       * @description The maximum number of allowed dollars to be spent, in aggregate, by all learners under this policy. Denoted in USD cents. Defaults to null, which means that no such maximum exists.
       */
      spend_limit?: number | null;
      /**
       * Format: date-time
       * @description Before this date, "late redemptions" will be allowed. If empty, late redemptions are disallowed.
       */
      late_redemption_allowed_until?: string | null;
      /** @description The maximum number of enrollments allowed for a single learner under this policy. Null value means no limit is set, which disables this feature. Required if policy_type = "PerLearnerEnrollmentCreditAccessPolicy". */
      per_learner_enrollment_limit?: number | null;
      /**
       * Per-learner spend limit (USD cents)
       * @description The maximum amount of allowed money spent for a single learner under this policy. Denoted in USD cents. Null value means no limit is set, which disables this feature. Required if policy_type = "PerLearnerSpendCreditAccessPolicy".
       */
      per_learner_spend_limit?: number | null;
      /** Format: uuid */
      learner_credit_request_config?: string | null;
      /** Format: uuid */
      assignment_configuration?: string | null;
    };
    /**
     * @description Request Serializer to validate policy redeem endpoint POST data.
     *
     * For view: SubsidyAccessPolicyRedeemViewset.redeem
     */
    SubsidyAccessPolicyRedeemRequest: {
      lms_user_id: number;
      content_key: string;
      metadata?: unknown;
    };
    /**
     * @description Response serializer to represent redeemable policies.
     *
     * For views:
     * * SubsidyAccessPolicyRedeemViewset.list
     * * SubsidyAccessPolicyRedeemViewset.can_redeem
     */
    SubsidyAccessPolicyRedeemableResponse: {
      /**
       * Format: uuid
       * @description The uuid that uniquely identifies this policy record.
       */
      uuid: string;
      policy_redemption_url: string;
      /** @description True if late redemption is currently allowed (i.e. late_redemption_allowed_until is in the future). */
      is_late_redemption_allowed: boolean;
      /** @description The type of this policy (e.g. the name of an access policy proxy model). */
      policy_type: string;
      /**
       * Format: uuid
       * @description The owning Enterprise Customer's UUID.  Cannot be blank or null.
       */
      enterprise_customer_uuid?: string;
      /** @description User-facing display name for this policy record */
      display_name?: string | null;
      /** @description Brief description about a specific policy. */
      description?: string;
      /**
       * @description Set to FALSE to deactivate and hide this policy. Use this when you want to disable redemption and make it disappear from all frontends, effectively soft-deleting it. Default is False (deactivated).
       * @default false
       */
      active?: boolean;
      /** @description True means redeemability of content using this policy has been enabled. Set this to False to deactivate the policy but keep it visible from an admin's perspective (useful when you want to just expire a policy without expiring the whole plan). */
      retired?: boolean;
      /**
       * Format: date-time
       * @description The date and time when this policy is considered retired.
       */
      retired_at?: string | null;
      /**
       * Format: uuid
       * @description The primary identifier of the catalog associated with this policy.
       */
      catalog_uuid: string;
      /**
       * Format: uuid
       * @description The primary identifier of the subsidy associated with this policy.
       */
      subsidy_uuid: string;
      /**
       * @description The mechanism by which learners access content in this policy, defaults to "direct".
       *
       * * `direct` - Direct
       * * `request` - Request
       * * `assigned` - Assigned
       */
      access_method?: components["schemas"]["AccessMethodEnum"];
      /**
       * Policy-wide spend limit (USD cents)
       * @description The maximum number of allowed dollars to be spent, in aggregate, by all learners under this policy. Denoted in USD cents. Defaults to null, which means that no such maximum exists.
       */
      spend_limit?: number | null;
      /**
       * Format: date-time
       * @description Before this date, "late redemptions" will be allowed. If empty, late redemptions are disallowed.
       */
      late_redemption_allowed_until?: string | null;
      /** @description The maximum number of enrollments allowed for a single learner under this policy. Null value means no limit is set, which disables this feature. Required if policy_type = "PerLearnerEnrollmentCreditAccessPolicy". */
      per_learner_enrollment_limit?: number | null;
      /**
       * Per-learner spend limit (USD cents)
       * @description The maximum amount of allowed money spent for a single learner under this policy. Denoted in USD cents. Null value means no limit is set, which disables this feature. Required if policy_type = "PerLearnerSpendCreditAccessPolicy".
       */
      per_learner_spend_limit?: number | null;
      /** Format: uuid */
      learner_credit_request_config?: string | null;
      /** Format: uuid */
      assignment_configuration?: string | null;
    };
    /** @description A read-only Serializer for responding to requests for ``SubsidyAccessPolicy`` records. */
    SubsidyAccessPolicyResponse: {
      /**
       * Format: uuid
       * @description The uuid that uniquely identifies this policy record.
       */
      uuid: string;
      /** @description The type of this policy (e.g. the name of an access policy proxy model). */
      policy_type: string;
      /** @description User-facing display name for this policy record */
      display_name: string | null;
      /** @description Brief description about a specific policy. */
      description: string;
      /**
       * @description Set to FALSE to deactivate and hide this policy. Use this when you want to disable redemption and make it disappear from all frontends, effectively soft-deleting it. Default is False (deactivated).
       * @default false
       */
      active: boolean;
      /** @description True means redeemability of content using this policy has been enabled. Set this to False to deactivate the policy but keep it visible from an admin's perspective (useful when you want to just expire a policy without expiring the whole plan). */
      retired: boolean;
      /**
       * Format: date-time
       * @description The date and time when this policy is considered retired.
       */
      retired_at: string | null;
      /**
       * Format: uuid
       * @description The owning Enterprise Customer's UUID.  Cannot be blank or null.
       */
      enterprise_customer_uuid: string;
      /**
       * Format: uuid
       * @description The primary identifier of the catalog associated with this policy.
       */
      catalog_uuid: string;
      /**
       * Format: uuid
       * @description The primary identifier of the subsidy associated with this policy.
       */
      subsidy_uuid: string;
      /**
       * @description The mechanism by which learners access content in this policy, defaults to "direct".
       *
       * * `direct` - Direct
       * * `request` - Request
       * * `assigned` - Assigned
       */
      access_method: components["schemas"]["AccessMethodEnum"];
      /** @description The maximum number of enrollments allowed for a single learner under this policy. Null value means no limit is set, which disables this feature. Required if policy_type = "PerLearnerEnrollmentCreditAccessPolicy". */
      per_learner_enrollment_limit: number | null;
      /**
       * Per-learner spend limit (USD cents)
       * @description The maximum amount of allowed money spent for a single learner under this policy. Denoted in USD cents. Null value means no limit is set, which disables this feature. Required if policy_type = "PerLearnerSpendCreditAccessPolicy".
       */
      per_learner_spend_limit: number | null;
      /**
       * Policy-wide spend limit (USD cents)
       * @description The maximum number of allowed dollars to be spent, in aggregate, by all learners under this policy. Denoted in USD cents. Defaults to null, which means that no such maximum exists.
       */
      spend_limit: number | null;
      subsidy_active_datetime: string;
      subsidy_expiration_datetime: string;
      is_subsidy_active: string;
      /** @description Aggregates about the policy and related objects. */
      aggregates: components["schemas"]["SubsidyAccessPolicyAggregates"];
      /** @description AssignmentConfiguration object for this policy. */
      assignment_configuration: components["schemas"]["AssignmentConfigurationResponse"];
      group_associations: string;
      /**
       * Format: date-time
       * @description Before this date, "late redemptions" will be allowed. If empty, late redemptions are disallowed.
       */
      late_redemption_allowed_until: string | null;
      is_late_redemption_allowed: string;
      /** Format: date-time */
      created: string;
    };
    /**
     * @description Request Serializer for PUT or PATCH requests to update a subsidy access policy.
     *
     * For views: SubsidyAccessPolicyViewSet.update and SubsidyAccessPolicyViewSet.partial_update.
     */
    SubsidyAccessPolicyUpdateRequest: {
      /** @description User-facing display name for this policy record */
      display_name?: string | null;
      /** @description Brief description about a specific policy. */
      description?: string;
      /** @description Set to FALSE to deactivate and hide this policy. Use this when you want to disable redemption and make it disappear from all frontends, effectively soft-deleting it. Default is False (deactivated). */
      active?: boolean;
      /** @description True means redeemability of content using this policy has been enabled. Set this to False to deactivate the policy but keep it visible from an admin's perspective (useful when you want to just expire a policy without expiring the whole plan). */
      retired?: boolean | null;
      /**
       * Format: date-time
       * @description The date and time when this policy is considered retired.
       */
      retired_at?: string | null;
      /**
       * Format: uuid
       * @description The primary identifier of the catalog associated with this policy.
       */
      catalog_uuid?: string;
      /**
       * Format: uuid
       * @description The primary identifier of the subsidy associated with this policy.
       */
      subsidy_uuid?: string;
      /**
       * @description The mechanism by which learners access content in this policy, defaults to "direct".
       *
       * * `direct` - Direct
       * * `request` - Request
       * * `assigned` - Assigned
       */
      access_method?: components["schemas"]["AccessMethodEnum"];
      /**
       * Policy-wide spend limit (USD cents)
       * @description The maximum number of allowed dollars to be spent, in aggregate, by all learners under this policy. Denoted in USD cents. Defaults to null, which means that no such maximum exists.
       */
      spend_limit?: number | null;
      /**
       * Per-learner spend limit (USD cents)
       * @description The maximum amount of allowed money spent for a single learner under this policy. Denoted in USD cents. Null value means no limit is set, which disables this feature. Required if policy_type = "PerLearnerSpendCreditAccessPolicy".
       */
      per_learner_spend_limit?: number | null;
      /** @description The maximum number of enrollments allowed for a single learner under this policy. Null value means no limit is set, which disables this feature. Required if policy_type = "PerLearnerEnrollmentCreditAccessPolicy". */
      per_learner_enrollment_limit?: number | null;
      subsidy_active_datetime: string | null;
      subsidy_expiration_datetime: string | null;
      is_subsidy_active: string | null;
      /**
       * Format: date-time
       * @description Before this date, "late redemptions" will be allowed. If empty, late redemptions are disallowed.
       */
      late_redemption_allowed_until?: string | null;
    };
    /** @description Serializer for the `SubsidyRequestCustomerConfiguration` model. */
    SubsidyRequestCustomerConfiguration: {
      /** Format: uuid */
      enterprise_customer_uuid: string;
      /** @description Whether or not subsidy requests are enabled for an enterprise. */
      subsidy_requests_enabled?: boolean;
      /**
       * @description Which type of subsidy is used to grant access.
       *
       * * `license` - License Subsidy
       * * `coupon` - Coupon Subsidy
       */
      subsidy_type?: components["schemas"]["SubsidyTypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"] | null;
      changed_by_lms_user_id: number | null;
    };
    /**
     * @description * `license` - License Subsidy
     * * `coupon` - Coupon Subsidy
     * @enum {string}
     */
    SubsidyTypeEnum: "license" | "coupon";
    /**
     * @description Base Serializer for BFF messages.
     *
     * Fields:
     *     user_message (str): A user-friendly message.
     *     developer_message (str): A more detailed message for debugging purposes.
     */
    Warning: {
      developer_message: string;
      user_message: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Delete a PolicyGroupAssociation record.
   * @description Delete all `PolicyGroupAssociation` records associated with the group uuid.
   * Params:
   *     enterprise_uuid: (required) The enterprise customer associated with the EnterpriseGroup
   *     group_uuid: (required) The uuid associated with the EnterpriseGroup in edx-enterprise
   */
  api_v1_delete_group_association_destroy: {
    parameters: {
      path: {
        enterprise_uuid: string;
        group_uuid: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      /** @description No response body */
      404: {
        content: never;
      };
    };
  };
  /**
   * Retrieve a profile for a learner from the admin portal.
   * @description Retrieves all licenses, subscriptions, and enrollments associated with
   * a learner's email address, LMS user ID, and enterprise.
   */
  api_v1_admin_view_learner_profile_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AdminLearnerProfileResponse"];
        };
      };
    };
  };
  /**
   * List content assignment configurations.
   * @description Lists ``AssignmentConfiguration`` records, filtered by the given query parameters.
   *
   * TODO: implement a ``subsidy_access_policy`` filter.
   */
  api_v1_assignment_configurations_list: {
    parameters: {
      query: {
        /** @description Whether this assignment configuration is active. Defaults to True. */
        active?: boolean;
        /** @description List only assignment configurations belonging to the given customer. */
        enterprise_customer_uuid: string;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedAssignmentConfigurationResponseList"];
        };
      };
    };
  };
  /**
   * Get or create a new content assignment configuration for the given subsidy access policy.
   * @description Creates a single ``AssignmentConfiguration`` record.
   */
  api_v1_assignment_configurations_create: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AssignmentConfigurationCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["AssignmentConfigurationCreateRequest"];
        "multipart/form-data": components["schemas"]["AssignmentConfigurationCreateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AssignmentConfigurationResponse"];
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["AssignmentConfigurationResponse"];
        };
      };
      /** @description No response body */
      403: {
        content: never;
      };
    };
  };
  /**
   * List content assignments.
   * @description Lists ``LearnerContentAssignment`` records, filtered by the given query parameters.
   */
  api_v1_assignment_configurations_admin_assignments_list: {
    parameters: {
      query?: {
        /** @description The globally unique content identifier to assign to the learner.  Joinable with ContentMetadata.content_key in enterprise-catalog. */
        content_key?: string;
        /** @description The globally unique content identifier to assign to the learner.  Joinable with ContentMetadata.content_key in enterprise-catalog. */
        content_key__in?: string[];
        /** @description Email of learner to assign content. Automatically scrubbed after 90 days. */
        learner_email?: string;
        /** @description Email of learner to assign content. Automatically scrubbed after 90 days. */
        learner_email__in?: string[];
        /** @description Choose from the following valid learner states: notifying, waiting, failed, expired */
        learner_state?: string;
        /** @description Choose from the following valid learner states: notifying, waiting, failed, expired */
        learner_state__in?: string[];
        /** @description The id of the Open edX LMS user record with which this LearnerContentAssignment is associated. This may be null at time of creation. */
        lms_user_id?: number;
        /** @description The id of the Open edX LMS user record with which this LearnerContentAssignment is associated. This may be null at time of creation. */
        lms_user_id__in?: number[];
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
        /** @description A search term. */
        search?: string;
        /**
         * @description The current state of the LearnerContentAssignment. One of: ['allocated', 'accepted', 'cancelled', 'errored', 'expired', 'reversed']
         *
         * * `allocated` - Allocated
         * * `accepted` - Accepted
         * * `cancelled` - Cancelled
         * * `errored` - Errored
         * * `expired` - Expired
         * * `reversed` - Reversed
         */
        state?: "accepted" | "allocated" | "cancelled" | "errored" | "expired" | "reversed";
        /** @description The current state of the LearnerContentAssignment. One of: ['allocated', 'accepted', 'cancelled', 'errored', 'expired', 'reversed'] */
        state__in?: string[];
      };
      path: {
        assignment_configuration_uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedLearnerContentAssignmentAdminResponseList"];
        };
      };
      /** @description No response body */
      404: {
        content: never;
      };
    };
  };
  /**
   * Retrieve a content assignment by UUID.
   * @description Retrieves a single ``LearnerContentAssignment`` record by uuid.
   */
  api_v1_assignment_configurations_admin_assignments_retrieve: {
    parameters: {
      path: {
        assignment_configuration_uuid: string;
        /** @description A UUID string identifying this learner content assignment. */
        uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LearnerContentAssignmentAdminResponse"];
        };
      };
      /** @description No response body */
      404: {
        content: never;
      };
    };
  };
  /**
   * Cancel assignments by UUID.
   * @description Cancel a list of ``LearnerContentAssignment`` records by uuid.
   *
   * ```
   * Raises:
   *     404 if any of the assignments were not found
   *     422 if any of the assignments threw an error (not found or not cancelable)
   * ```
   */
  api_v1_assignment_configurations_admin_assignments_cancel_create: {
    parameters: {
      path: {
        assignment_configuration_uuid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LearnerContentAssignmentActionRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LearnerContentAssignmentActionRequest"];
        "multipart/form-data": components["schemas"]["LearnerContentAssignmentActionRequest"];
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
      /** @description No response body */
      404: {
        content: never;
      };
      /** @description No response body */
      422: {
        content: never;
      };
    };
  };
  /**
   * Cancel all assignments for the requested assignment configuration.
   * @description Cancel all ``LearnerContentAssignment`` associated with the given assignment configuration.
   * Optionally, cancel only assignments matching the criteria of the provided query param filters.
   *
   * ```
   * Raises:
   *     404 if no cancelable assignments were found
   *     422 if any of the assignments threw an error (not found or not cancelable)
   * ```
   */
  api_v1_assignment_configurations_admin_assignments_cancel_all_create: {
    parameters: {
      query?: {
        /** @description The globally unique content identifier to assign to the learner.  Joinable with ContentMetadata.content_key in enterprise-catalog. */
        content_key?: string;
        /** @description The globally unique content identifier to assign to the learner.  Joinable with ContentMetadata.content_key in enterprise-catalog. */
        content_key__in?: string[];
        /** @description Email of learner to assign content. Automatically scrubbed after 90 days. */
        learner_email?: string;
        /** @description Email of learner to assign content. Automatically scrubbed after 90 days. */
        learner_email__in?: string[];
        /** @description Choose from the following valid learner states: notifying, waiting, failed, expired */
        learner_state?: string;
        /** @description Choose from the following valid learner states: notifying, waiting, failed, expired */
        learner_state__in?: string[];
        /** @description The id of the Open edX LMS user record with which this LearnerContentAssignment is associated. This may be null at time of creation. */
        lms_user_id?: number;
        /** @description The id of the Open edX LMS user record with which this LearnerContentAssignment is associated. This may be null at time of creation. */
        lms_user_id__in?: number[];
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description A search term. */
        search?: string;
        /**
         * @description The current state of the LearnerContentAssignment. One of: ['allocated', 'accepted', 'cancelled', 'errored', 'expired', 'reversed']
         *
         * * `allocated` - Allocated
         * * `accepted` - Accepted
         * * `cancelled` - Cancelled
         * * `errored` - Errored
         * * `expired` - Expired
         * * `reversed` - Reversed
         */
        state?: "accepted" | "allocated" | "cancelled" | "errored" | "expired" | "reversed";
        /** @description The current state of the LearnerContentAssignment. One of: ['allocated', 'accepted', 'cancelled', 'errored', 'expired', 'reversed'] */
        state__in?: string[];
      };
      path: {
        assignment_configuration_uuid: string;
      };
    };
    responses: {
      /** @description No response body */
      202: {
        content: never;
      };
      /** @description No response body */
      404: {
        content: never;
      };
      /** @description No response body */
      422: {
        content: never;
      };
    };
  };
  /**
   * Nudge assignments by UUID.
   * @description Send nudges to a list of learners with associated ``LearnerContentAssignment``
   * record by list of uuids.
   *
   * ```
   * Raises:
   *     400 If assignment_uuids list length is 0 or the value for days_before_course_start_date is less than 1
   *     422 If the nudge_assignments call fails for any other reason
   * ```
   */
  api_v1_assignment_configurations_admin_assignments_nudge_create: {
    parameters: {
      path: {
        assignment_configuration_uuid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LearnerContentAssignmentNudgeRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LearnerContentAssignmentNudgeRequest"];
        "multipart/form-data": components["schemas"]["LearnerContentAssignmentNudgeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LearnerContentAssignmentNudgeResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["LearnerContentAssignmentNudgeHTTP422Error"];
        };
      };
    };
  };
  /**
   * Remind assignments by UUID.
   * @description Send reminders to a list of learners with associated ``LearnerContentAssignment``
   * record by list of uuids.
   *
   * ```
   * Raises:
   *     404 if any of the assignments were not found
   *     422 if any of the assignments threw an error (not found or not remindable)
   * ```
   */
  api_v1_assignment_configurations_admin_assignments_remind_create: {
    parameters: {
      path: {
        assignment_configuration_uuid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LearnerContentAssignmentActionRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LearnerContentAssignmentActionRequest"];
        "multipart/form-data": components["schemas"]["LearnerContentAssignmentActionRequest"];
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
      /** @description No response body */
      404: {
        content: never;
      };
      /** @description No response body */
      422: {
        content: never;
      };
    };
  };
  /**
   * Remind all assignments for the given assignment configuration.
   * @description Send reminders for all assignments related to the given assignment configuration.
   * Optionally, remind only assignments matching the criteria of the provided query param filters.
   *
   * ```
   * Raises:
   *     404 if no cancelable assignments were found
   *     422 if any of the assignments threw an error (not found or not remindable)
   * ```
   */
  api_v1_assignment_configurations_admin_assignments_remind_all_create: {
    parameters: {
      query?: {
        /** @description The globally unique content identifier to assign to the learner.  Joinable with ContentMetadata.content_key in enterprise-catalog. */
        content_key?: string;
        /** @description The globally unique content identifier to assign to the learner.  Joinable with ContentMetadata.content_key in enterprise-catalog. */
        content_key__in?: string[];
        /** @description Email of learner to assign content. Automatically scrubbed after 90 days. */
        learner_email?: string;
        /** @description Email of learner to assign content. Automatically scrubbed after 90 days. */
        learner_email__in?: string[];
        /** @description Choose from the following valid learner states: notifying, waiting, failed, expired */
        learner_state?: string;
        /** @description Choose from the following valid learner states: notifying, waiting, failed, expired */
        learner_state__in?: string[];
        /** @description The id of the Open edX LMS user record with which this LearnerContentAssignment is associated. This may be null at time of creation. */
        lms_user_id?: number;
        /** @description The id of the Open edX LMS user record with which this LearnerContentAssignment is associated. This may be null at time of creation. */
        lms_user_id__in?: number[];
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description A search term. */
        search?: string;
        /**
         * @description The current state of the LearnerContentAssignment. One of: ['allocated', 'accepted', 'cancelled', 'errored', 'expired', 'reversed']
         *
         * * `allocated` - Allocated
         * * `accepted` - Accepted
         * * `cancelled` - Cancelled
         * * `errored` - Errored
         * * `expired` - Expired
         * * `reversed` - Reversed
         */
        state?: "accepted" | "allocated" | "cancelled" | "errored" | "expired" | "reversed";
        /** @description The current state of the LearnerContentAssignment. One of: ['allocated', 'accepted', 'cancelled', 'errored', 'expired', 'reversed'] */
        state__in?: string[];
      };
      path: {
        assignment_configuration_uuid: string;
      };
    };
    responses: {
      /** @description No response body */
      202: {
        content: never;
      };
      /** @description No response body */
      404: {
        content: never;
      };
      /** @description No response body */
      422: {
        content: never;
      };
    };
  };
  /**
   * List content assignments.
   * @description Lists ``LearnerContentAssignment`` records assigned to the requesting user for the given assignment
   * configuration.
   */
  api_v1_assignment_configurations_assignments_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
      path: {
        assignment_configuration_uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedLearnerContentAssignmentResponseList"];
        };
      };
    };
  };
  /**
   * Retrieve content assignments by UUID.
   * @description Retrieves a single ``LearnerContentAssignment`` record by uuid, if assigned to the requesting user for this
   * given assignment configuration.
   */
  api_v1_assignment_configurations_assignments_retrieve: {
    parameters: {
      path: {
        assignment_configuration_uuid: string;
        uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LearnerContentAssignmentResponse"];
        };
      };
      /** @description No response body */
      404: {
        content: never;
      };
    };
  };
  /**
   * Retrieve content assignment configuration by UUID.
   * @description Retrieves a single ``AssignmentConfiguration`` record by uuid.
   */
  api_v1_assignment_configurations_retrieve: {
    parameters: {
      path: {
        /** @description A UUID string identifying this assignment configuration. */
        uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AssignmentConfigurationResponse"];
        };
      };
      /** @description No response body */
      403: {
        content: never;
      };
    };
  };
  /**
   * Partially update (with a PUT) a content assignment configuration by UUID.
   * @description Updates a single ``AssignmentConfiguration`` record by uuid.  All fields for the update are optional (which is
   * different from a standard PUT request).
   */
  api_v1_assignment_configurations_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this assignment configuration. */
        uuid: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AssignmentConfigurationUpdateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["AssignmentConfigurationUpdateRequest"];
        "multipart/form-data": components["schemas"]["AssignmentConfigurationUpdateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AssignmentConfigurationResponse"];
        };
      };
      /** @description No response body */
      403: {
        content: never;
      };
    };
  };
  /**
   * Soft-delete content assignment configuration by UUID.
   * @description Soft-delete a single ``AssignmentConfiguration`` record by uuid, and unlink from the associated policy.
   *
   * Note: This endpoint supports an optional "reason" request body parameter, representing the description (free
   * form text) for why the AssignmentConfiguration is being deactivated.
   */
  api_v1_assignment_configurations_destroy: {
    parameters: {
      path: {
        /** @description A UUID string identifying this assignment configuration. */
        uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AssignmentConfigurationResponse"];
        };
      };
      /** @description No response body */
      403: {
        content: never;
      };
    };
  };
  /**
   * Partially update (with a PATCH) a content assignment configuration by UUID.
   * @description Updates a single ``AssignmentConfiguration`` record by uuid.  All fields for the update are optional.
   */
  api_v1_assignment_configurations_partial_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this assignment configuration. */
        uuid: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedAssignmentConfigurationUpdateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedAssignmentConfigurationUpdateRequest"];
        "multipart/form-data": components["schemas"]["PatchedAssignmentConfigurationUpdateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AssignmentConfigurationResponse"];
        };
      };
      /** @description No response body */
      403: {
        content: never;
      };
    };
  };
  /**
   * Acknowledge assignments for the given AssignmentConfiguration.
   * @description POST API endpoint that allows the authenticated user to acknowledge cancelled and/or expired assignments
   * for the specified AssignmentConfiguration. By acknowledging the assignments in an expired
   * and/or cancelled state, the user is indicating they have seen the assignments and have
   * opted to dismiss them from the UI.
   *
   * This endpoint will return an object containing:
   * - assignments successfully acknowledged
   * - assignments already acknowledged
   * - assignments not acknowledged
   */
  api_v1_assignment_configurations_acknowledge_assignments_create: {
    parameters: {
      path: {
        /** @description A UUID string identifying this assignment configuration. */
        uuid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssignmentConfigurationAcknowledgeAssignmentsRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["AssignmentConfigurationAcknowledgeAssignmentsRequest"];
        "multipart/form-data": components["schemas"]["AssignmentConfigurationAcknowledgeAssignmentsRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AssignmentConfigurationAcknowledgeAssignmentsResponse"];
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["AssignmentConfigurationAcknowledgeAssignmentsResponse"];
        };
      };
      /** @description No response body */
      403: {
        content: never;
      };
    };
  };
  /**
   * Academy route
   * @description Retrieves, transforms, and processes data for the learner academy route.
   */
  api_v1_bffs_learner_academy_create: {
    parameters: {
      query?: {
        /** @description The slug of the enterprise customer. */
        enterprise_customer_slug?: string;
        /** @description The UUID of the enterprise customer. */
        enterprise_customer_uuid?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LearnerAcademyRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LearnerAcademyRequest"];
        "multipart/form-data": components["schemas"]["LearnerAcademyRequest"];
      };
    };
    responses: {
      /** @description Sample response for the learner academy route. */
      200: {
        content: {
          "application/json": components["schemas"]["LearnerAcademyResponse"];
        };
      };
    };
  };
  /**
   * Dashboard route
   * @description Retrieves, transforms, and processes data for the learner dashboard route.
   */
  api_v1_bffs_learner_dashboard_create: {
    parameters: {
      query?: {
        /** @description The slug of the enterprise customer. */
        enterprise_customer_slug?: string;
        /** @description The UUID of the enterprise customer. */
        enterprise_customer_uuid?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LearnerDashboardRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LearnerDashboardRequest"];
        "multipart/form-data": components["schemas"]["LearnerDashboardRequest"];
      };
    };
    responses: {
      /** @description Sample response for the learner dashboard route. */
      200: {
        content: {
          "application/json": components["schemas"]["LearnerDashboardResponse"];
        };
      };
    };
  };
  /**
   * Search route
   * @description Retrieves, transforms, and processes data for the learner search route.
   */
  api_v1_bffs_learner_search_create: {
    parameters: {
      query?: {
        /** @description The slug of the enterprise customer. */
        enterprise_customer_slug?: string;
        /** @description The UUID of the enterprise customer. */
        enterprise_customer_uuid?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LearnerSearchRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LearnerSearchRequest"];
        "multipart/form-data": components["schemas"]["LearnerSearchRequest"];
      };
    };
    responses: {
      /** @description Sample response for the learner search route. */
      200: {
        content: {
          "application/json": components["schemas"]["LearnerSearchResponse"];
        };
      };
    };
  };
  /**
   * Skills Quiz route
   * @description Retrieves, transforms, and processes data for the learner skills quiz route.
   */
  api_v1_bffs_learner_skills_quiz_create: {
    parameters: {
      query?: {
        /** @description The slug of the enterprise customer. */
        enterprise_customer_slug?: string;
        /** @description The UUID of the enterprise customer. */
        enterprise_customer_uuid?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LearnerSkillsQuizRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LearnerSkillsQuizRequest"];
        "multipart/form-data": components["schemas"]["LearnerSkillsQuizRequest"];
      };
    };
    responses: {
      /** @description Sample response for the learner skills quiz route. */
      200: {
        content: {
          "application/json": components["schemas"]["LearnerSkillsQuizResponse"];
        };
      };
    };
  };
  /**
   * Coupon Code request list.
   * @description Viewset for coupon code requests
   */
  api_v1_coupon_code_requests_list: {
    parameters: {
      query?: {
        course_id?: string;
        enterprise_customer_uuid?: string;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
        /** @description A search term. */
        search?: string;
        user__email?: string;
        uuid?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedCouponCodeRequestList"];
        };
      };
    };
  };
  /**
   * Coupon Code request create.
   * @description Viewset for coupon code requests
   */
  api_v1_coupon_code_requests_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CouponCodeRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CouponCodeRequest"];
        "multipart/form-data": components["schemas"]["CouponCodeRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CouponCodeRequest"];
        };
      };
    };
  };
  /**
   * Coupon Code request retrieve.
   * @description Viewset for coupon code requests
   */
  api_v1_coupon_code_requests_retrieve: {
    parameters: {
      path: {
        /** @description A UUID string identifying this coupon code request. */
        uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CouponCodeRequest"];
        };
      };
    };
  };
  /**
   * Coupon Code request approve.
   * @description Action of approving a Coupon Subsidy Request
   */
  api_v1_coupon_code_requests_approve_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CouponCodeRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CouponCodeRequest"];
        "multipart/form-data": components["schemas"]["CouponCodeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CouponCodeRequest"];
        };
      };
    };
  };
  /**
   * Coupon Code request deny.
   * @description Action of declining a Coupon Subsidy Request
   */
  api_v1_coupon_code_requests_decline_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CouponCodeRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CouponCodeRequest"];
        "multipart/form-data": components["schemas"]["CouponCodeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CouponCodeRequest"];
        };
      };
    };
  };
  /**
   * Coupon Code request overview.
   * @description Returns an overview of subsidy requests count by state.
   */
  api_v1_coupon_code_requests_overview_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CouponCodeRequest"];
        };
      };
    };
  };
  /**
   * List customer config.
   * @description Viewset for customer configurations.
   */
  api_v1_customer_configurations_list: {
    parameters: {
      query?: {
        enterprise_customer_uuid?: string;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
        subsidy_requests_enabled?: boolean;
        /**
         * @description Which type of subsidy is used to grant access.
         *
         * * `license` - License Subsidy
         * * `coupon` - Coupon Subsidy
         */
        subsidy_type?: "coupon" | "license" | null;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedSubsidyRequestCustomerConfigurationList"];
        };
      };
    };
  };
  /**
   * Create customer config.
   * @description Viewset for customer configurations.
   */
  api_v1_customer_configurations_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubsidyRequestCustomerConfiguration"];
        "application/x-www-form-urlencoded": components["schemas"]["SubsidyRequestCustomerConfiguration"];
        "multipart/form-data": components["schemas"]["SubsidyRequestCustomerConfiguration"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SubsidyRequestCustomerConfiguration"];
        };
      };
    };
  };
  /**
   * Retrieve customer config.
   * @description Viewset for customer configurations.
   */
  api_v1_customer_configurations_retrieve: {
    parameters: {
      path: {
        /** @description A UUID string identifying this subsidy request customer configuration. */
        enterprise_customer_uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubsidyRequestCustomerConfiguration"];
        };
      };
    };
  };
  /**
   * Update customer config.
   * @description Viewset for customer configurations.
   */
  api_v1_customer_configurations_partial_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this subsidy request customer configuration. */
        enterprise_customer_uuid: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedSubsidyRequestCustomerConfiguration"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedSubsidyRequestCustomerConfiguration"];
        "multipart/form-data": components["schemas"]["PatchedSubsidyRequestCustomerConfiguration"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubsidyRequestCustomerConfiguration"];
        };
      };
    };
  };
  /**
   * License request list.
   * @description Viewset for license requests
   */
  api_v1_license_requests_list: {
    parameters: {
      query?: {
        course_id?: string;
        enterprise_customer_uuid?: string;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
        /** @description A search term. */
        search?: string;
        user__email?: string;
        uuid?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedLicenseRequestList"];
        };
      };
    };
  };
  /**
   * License request create.
   * @description Viewset for license requests
   */
  api_v1_license_requests_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LicenseRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LicenseRequest"];
        "multipart/form-data": components["schemas"]["LicenseRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["LicenseRequest"];
        };
      };
    };
  };
  /**
   * License request retrieve.
   * @description Viewset for license requests
   */
  api_v1_license_requests_retrieve: {
    parameters: {
      path: {
        /** @description A UUID string identifying this license request. */
        uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LicenseRequest"];
        };
      };
    };
  };
  /**
   * License request approve.
   * @description Action of approving a License Subsidy Request
   */
  api_v1_license_requests_approve_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LicenseRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LicenseRequest"];
        "multipart/form-data": components["schemas"]["LicenseRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LicenseRequest"];
        };
      };
    };
  };
  /**
   * License request deny.
   * @description Action of declining a License Subsidy Request
   */
  api_v1_license_requests_decline_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LicenseRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LicenseRequest"];
        "multipart/form-data": components["schemas"]["LicenseRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LicenseRequest"];
        };
      };
    };
  };
  /**
   * License request overview.
   * @description Returns an overview of subsidy requests count by state.
   */
  api_v1_license_requests_overview_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LicenseRequest"];
        };
      };
    };
  };
  /**
   * Allocate assignments
   * @description Idempotently creates or updates allocated ``LearnerContentAssignment``
   * records for a requested list of user email addresses, in the requested
   * ``content_key`` and at the requested price of ``content_price_cents``.
   * These assignments are related to the ``AssignmentConfiguration`` of the
   * requested ``AssignedLearnerCreditAccessPolicy`` record.
   */
  api_v1_policy_allocation_allocate_create: {
    parameters: {
      query: {
        /** @description Course content_key to which these learners are assigned. */
        content_key: string;
        /** @description The price, in USD cents, of this content at the time of allocation. Must be >= 0. */
        content_price_cents: number;
        /** @description Learner emails to whom LearnerContentAssignments should be allocated. */
        learner_emails: string[];
      };
      path: {
        policy_uuid: string;
      };
    };
    responses: {
      202: {
        content: {
          "application/json": components["schemas"]["SubsidyAccessPolicyAllocationResponse"];
        };
      };
    };
  };
  /**
   * Redeem with a policy.
   * @description Redeem a policy for given `lms_user_id` and `content_key`
   *
   * status codes::
   *
   *     400: There are missing or otherwise invalid input parameters.
   *     403: The requester has insufficient redeem permissions.
   *     422: The subsidy access policy is not redeemable in a way that IS NOT retryable.
   *     429: The subsidy access policy is not redeemable in a way that IS retryable (e.g. policy currently locked).
   *     200: The policy was successfully redeemed.  Response body is JSON with a serialized Transaction
   *          containing the following keys (sample values):
   *          {
   *              "uuid": "the-transaction-uuid",
   *              "state": "committed",
   *              "idempotency_key": "the-idempotency-key",
   *              "lms_user_id": 54321,
   *              "content_key": "demox_1234+2T2023",
   *              "quantity": 19900,
   *              "unit": "USD_CENTS",
   *              "reference_id": 1234,
   *              "reference_type": "enterprise_fufillment_source_uuid",
   *              "subsidy_access_policy_uuid": "a-policy-uuid",
   *              "metadata": {...},
   *              "created": "created-datetime",
   *              "modified": "modified-datetime",
   *              "reversals": []
   *          }
   */
  api_v1_policy_redemption_redeem_create: {
    parameters: {
      path: {
        policy_uuid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubsidyAccessPolicyRedeemRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SubsidyAccessPolicyRedeemRequest"];
        "multipart/form-data": components["schemas"]["SubsidyAccessPolicyRedeemRequest"];
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  /**
   * List credits available.
   * @description Return a list of all redeemable policies for given `enterprise_customer_uuid`, `lms_user_id` that have
   * redeemable credit available.
   *
   * Note that, for each redeemable policy that is *assignable*, the policy record
   * in the response payload will also contain a list of `learner_content_assignments`
   * associated with the requested `lms_user_id`.
   */
  api_v1_policy_redemption_credits_available_list: {
    parameters: {
      query: {
        /** @description The customer for which available policies are filtered. */
        enterprise_customer_uuid: string;
        /** @description The user identifier for which available policies are filtered. */
        lms_user_id: number;
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedSubsidyAccessPolicyCreditsAvailableResponseList"];
        };
      };
    };
  };
  /**
   * Can redeem.
   * @description Within a specified enterprise customer, retrieves a single, redeemable access policy (or null)
   * for each ``content_key`` in a provided list of content keys.
   *
   * Returns ``rest_framework.response.Response``:
   *
   *         400: If there are missing or otherwise invalid input parameters.  Response body is JSON with a single
   *              `Error` key.
   *
   *         403: If the requester has insufficient permissions, Response body is JSON with a single `Error` key.
   *
   *         200: If a redeemable access policy was found, an existing redemption was found, or neither.  Response
   *              body is a JSON list of dict containing redemption evaluations for each given content_key.  See
   *              redoc for a sample response.
   */
  api_v1_policy_redemption_enterprise_customer_can_redeem_list: {
    parameters: {
      query: {
        /** @description Content keys about which redeemability will be queried. */
        content_key: string[];
        /** @description The user identifier for which redeemability will be queried (only applicable to staff users). */
        lms_user_id?: number;
      };
      path: {
        enterprise_customer_uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubsidyAccessPolicyCanRedeemElementResponse"][];
        };
      };
    };
  };
  /**
   * Create a new provisioning request.
   * @description Create view for provisioning.
   */
  api_v1_provisioning_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProvisioningRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ProvisioningRequest"];
        "multipart/form-data": components["schemas"]["ProvisioningRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProvisioningResponse"];
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["ProvisioningResponse"];
        };
      };
    };
  };
  /**
   * List subsidy access policies for an enterprise customer.
   * @description Lists `SubsidyAccessPolicy` records, filtered by the
   * given query parameters.
   */
  api_v1_subsidy_access_policies_list: {
    parameters: {
      query: {
        /** @description Set to FALSE to deactivate and hide this policy. Use this when you want to disable redemption and make it disappear from all frontends, effectively soft-deleting it. Default is False (deactivated). */
        active?: boolean;
        /** @description The owning Enterprise Customer's UUID.  Cannot be blank or null. */
        enterprise_customer_uuid: string;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
        /** @description The type of this policy (e.g. the name of an access policy proxy model). */
        policy_type?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedSubsidyAccessPolicyResponseList"];
        };
      };
    };
  };
  /**
   * Create a new subsidy access policy.
   * @description Creates a single `SubsidyAccessPolicy` record, or returns
   * an existing one if an **active** record with the requested (enterprise_customer_uuid,
   * subsidy_uuid, catalog_uuid, access_method) values already exists.
   */
  api_v1_subsidy_access_policies_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubsidyAccessPolicyCRUD"];
        "application/x-www-form-urlencoded": components["schemas"]["SubsidyAccessPolicyCRUD"];
        "multipart/form-data": components["schemas"]["SubsidyAccessPolicyCRUD"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubsidyAccessPolicyResponse"];
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["SubsidyAccessPolicyResponse"];
        };
      };
    };
  };
  /**
   * Retrieve subsidy access policy by UUID.
   * @description Retrieves a single `SubsidyAccessPolicy` record by uuid.
   */
  api_v1_subsidy_access_policies_retrieve: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubsidyAccessPolicyResponse"];
        };
      };
    };
  };
  /**
   * Partially update (with a PUT) a subsidy access policy by UUID.
   * @description Updates a single `SubsidyAccessPolicy` record by uuid.  All fields for the update are optional
   * (which is different from a standard PUT request).
   */
  api_v1_subsidy_access_policies_update: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SubsidyAccessPolicyUpdateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SubsidyAccessPolicyUpdateRequest"];
        "multipart/form-data": components["schemas"]["SubsidyAccessPolicyUpdateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubsidyAccessPolicyResponse"];
        };
      };
      /** @description No response body */
      404: {
        content: never;
      };
    };
  };
  /**
   * Soft-delete subsidy access policy by UUID.
   * @description Soft-delete a single `SubsidyAccessPolicy` record by uuid.
   */
  api_v1_subsidy_access_policies_destroy: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubsidyAccessPolicyResponse"];
        };
      };
      /** @description No response body */
      404: {
        content: never;
      };
    };
  };
  /**
   * Partially update (with a PATCH) a subsidy access policy by UUID.
   * @description Updates a single `SubsidyAccessPolicy` record by uuid.  All fields for the update are optional.
   */
  api_v1_subsidy_access_policies_partial_update: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedSubsidyAccessPolicyUpdateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedSubsidyAccessPolicyUpdateRequest"];
        "multipart/form-data": components["schemas"]["PatchedSubsidyAccessPolicyUpdateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubsidyAccessPolicyResponse"];
        };
      };
      /** @description No response body */
      404: {
        content: never;
      };
    };
  };
  /**
   * List group member data with aggregates.
   * @description Retrieves Enterprise Group Members data zipped with subsidy aggregate enrollment data from a group record
   * linked to a subsidy access policy.
   *
   * Params:
   *     group_uuid: (Optional) The Enterprise Group uuid from which to select members. Leave blank to fetch the
   *         first group found in the PolicyGroupAssociation table associated with the supplied SubsidyAccessPolicy.
   *     user_query: (Optional) Query sub-string to search/filter group members by email.
   *     sort_by: (Optional) Choice- sort results by either: 'member_details', 'status', or 'recent_action'.
   *     show_removed: (Optional) Whether or not to return deleted membership records.
   *     is_reversed: (Optional) Reverse the order in which records are returned.
   *     format_csv: (Optional) Whether or not to return data in a csv format, defaults to `False`
   *     page: (Optional) Which page of Enterprise Group Membership records to request. Leave blank to fetch all
   *         group membership records
   *     learners: (Optional) Array of learner emails. If specified, the endpoint will only return membership
   *         records associated with one of the provided emails.
   */
  api_v1_subsidy_access_policies_group_members_retrieve: {
    parameters: {
      query: {
        /** @description Course content_key to which these learners are assigned. */
        content_key: string;
        /** @description The price, in USD cents, of this content at the time of allocation. Must be >= 0. */
        content_price_cents: number;
        /** @description Learner emails to whom LearnerContentAssignments should be allocated. */
        learner_emails: string[];
      };
      path: {
        uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupMemberWithAggregatesResponse"];
        };
      };
      /** @description No response body */
      404: {
        content: never;
      };
    };
  };
  /** @description GET /csrf/api/v1/token */
  csrf_api_v1_token_retrieve: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
}
